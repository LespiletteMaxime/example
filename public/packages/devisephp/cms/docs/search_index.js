var search_data = {
    'index': {
        'searchIndex': ["devise","devise\\calendar","devise\\cli","devise\\languages","devise\\media","devise\\media\\categories","devise\\media\\encoding","devise\\media\\files","devise\\media\\images","devise\\menus","devise\\pages","devise\\pages\\collections","devise\\pages\\fields","devise\\pages\\interrupter","devise\\pages\\interrupter\\exceptions","devise\\pages\\interrupter\\nodes","devise\\pages\\viewvars","devise\\search","devise\\sidebar","devise\\support","devise\\support\\sortable","devise\\users","devise\\users\\groups","devise\\users\\permissions","devise\\users\\sessions","devise\\calendar\\calendarresponsehandler","devise\\calendar\\pageversionsource","devise\\calendar\\source","devise\\cli\\installercommand","devise\\deviseserviceprovider","devise\\languages\\languagedetector","devise\\languages\\languagesmanager","devise\\languages\\languagesrepository","devise\\languages\\languagesresponsehandler","devise\\languages\\localedetector","devise\\media\\categories\\categoryalreadyexistsexception","devise\\media\\categories\\categorypaths","devise\\media\\categories\\manager","devise\\media\\categories\\responsehandler","devise\\media\\encoding\\encodingserviceprovider","devise\\media\\encoding\\invalidencodingsettingsexception","devise\\media\\encoding\\zencoderjob","devise\\media\\encoding\\zencodernotificationscontroller","devise\\media\\files\\filedownloader","devise\\media\\files\\filesystem","devise\\media\\files\\invalidfileexception","devise\\media\\files\\manager","devise\\media\\files\\repository","devise\\media\\files\\responsehandler","devise\\media\\images\\images","devise\\media\\images\\manager","devise\\media\\images\\responsehandler","devise\\media\\mediapaths","devise\\menus\\menucache","devise\\menus\\menusmanager","devise\\menus\\menusrepository","devise\\menus\\menusresponsehandler","devise\\pages\\collections\\collectionfields","devise\\pages\\collections\\collectionfieldsfactory","devise\\pages\\collections\\collectionsmanager","devise\\pages\\collections\\collectionsrepository","devise\\pages\\collections\\responsehandler","devise\\pages\\fields\\duplicatefieldkeyexception","devise\\pages\\fields\\fieldmanager","devise\\pages\\fields\\fieldvalue","devise\\pages\\fields\\fieldsrepository","devise\\pages\\fields\\fieldsresponsehandler","devise\\pages\\fields\\imagefieldupdated","devise\\pages\\fields\\videofieldupdated","devise\\pages\\interrupter\\block","devise\\pages\\interrupter\\blockfactory","devise\\pages\\interrupter\\devisebladecompiler","devise\\pages\\interrupter\\devisetag","devise\\pages\\interrupter\\dvspagedata","devise\\pages\\interrupter\\exceptions\\duplicatedevisekeyexception","devise\\pages\\interrupter\\exceptions\\invaliddevisekeyexception","devise\\pages\\interrupter\\exceptions\\invaliddevisetagexception","devise\\pages\\interrupter\\nodes\\devisetagnode","devise\\pages\\interrupter\\nodes\\endforeachnode","devise\\pages\\interrupter\\nodes\\endifnode","devise\\pages\\interrupter\\nodes\\foreachnode","devise\\pages\\interrupter\\nodes\\ifnode","devise\\pages\\interrupter\\nodes\\includenode","devise\\pages\\interrupter\\nodes\\node","devise\\pages\\interrupter\\nodes\\nodefactory","devise\\pages\\interrupter\\nodes\\unidentifiednodeexception","devise\\pages\\interrupter\\viewopener","devise\\pages\\pagecontroller","devise\\pages\\pagemanager","devise\\pages\\pagenotfoundexception","devise\\pages\\pageresponsehandler","devise\\pages\\pageversionmanager","devise\\pages\\pageversionsrepository","devise\\pages\\pagesexception","devise\\pages\\pagesrepository","devise\\pages\\pagesserviceprovider","devise\\pages\\viewvars\\databuilder","devise\\pages\\viewvars\\datacrawler","devise\\pages\\viewvars\\deviserouteconfigurationexception","devise\\pages\\viewvars\\viewvarcomposer","devise\\search\\pagesearch","devise\\search\\pagination","devise\\search\\searchablemodeltrait","devise\\search\\universalsearch","devise\\search\\universalsearchprovider","devise\\sidebar\\responsehandler","devise\\sidebar\\sidebardata","devise\\sidebar\\sidebardatatranslator","devise\\sidebar\\sidebarmanager","devise\\sidebar\\sidebarserviceprovider","devise\\sidebar\\snippetbladecompiler","devise\\support\\deviseexception","devise\\support\\deviseresponse","devise\\support\\devisevalidationexception","devise\\support\\framework","devise\\support\\sortable\\eloquentbuilder","devise\\support\\sortable\\eloquentmodel","devise\\support\\sortable\\filter","devise\\support\\sortable\\link","devise\\support\\sortable\\manager","devise\\support\\sortable\\sort","devise\\support\\sortable\\sortablefacade","devise\\support\\sortable\\sortableserviceprovider","devise\\support\\supportserviceprovider","devise\\users\\deviseuser","devise\\users\\deviseusercontroller","devise\\users\\groups\\groupmanager","devise\\users\\groups\\groupsrepository","devise\\users\\groups\\groupsresponsehandler","devise\\users\\permissions\\redirecthandler","devise\\users\\permissions\\rulelist","devise\\users\\permissions\\rulemanager","devise\\users\\permissions\\rulemanagerfacade","devise\\users\\sessions\\sessionsrepository","devise\\users\\userhelper","devise\\users\\usermanager","devise\\users\\userserviceprovider","devise\\users\\usersrepository","devise\\users\\usersresponsehandler","devise\\calendar\\calendarresponsehandler::__construct","devise\\calendar\\calendarresponsehandler::requestpageversioneventsource","devise\\calendar\\calendarresponsehandler::requestpageversioneventupdate","devise\\calendar\\pageversionsource::__construct","devise\\calendar\\pageversionsource::fetchevents","devise\\calendar\\pageversionsource::updatepageversion","devise\\calendar\\source::fetchevents","devise\\cli\\installercommand::configure","devise\\cli\\installercommand::execute","devise\\deviseserviceprovider::boot","devise\\deviseserviceprovider::register","devise\\deviseserviceprovider::provides","devise\\deviseserviceprovider::registerencoding","devise\\deviseserviceprovider::registersidebar","devise\\deviseserviceprovider::registerdeviseuniversalsearch","devise\\deviseserviceprovider::registerusers","devise\\languages\\languagedetector::__construct","devise\\languages\\languagedetector::current","devise\\languages\\languagedetector::universal","devise\\languages\\languagedetector::update","devise\\languages\\languagedetector::primarylanguageid","devise\\languages\\languagesmanager::__construct","devise\\languages\\languagesmanager::modifyactiveflag","devise\\languages\\languagesrepository::__construct","devise\\languages\\languagesrepository::languages","devise\\languages\\languagesrepository::activelanguagelist","devise\\languages\\languagesrepository::languageselectoroptions","devise\\languages\\languagesrepository::currentlanguage","devise\\languages\\languagesrepository::findlanguageforpageversion","devise\\languages\\languagesresponsehandler::__construct","devise\\languages\\languagesresponsehandler::requestpatchlanguage","devise\\languages\\localedetector::current","devise\\languages\\localedetector::cookie","devise\\languages\\localedetector::universal","devise\\languages\\localedetector::header","devise\\languages\\localedetector::segment","devise\\languages\\localedetector::update","devise\\media\\categories\\categorypaths::__construct","devise\\media\\categories\\categorypaths::fromdot","devise\\media\\categories\\categorypaths::todot","devise\\media\\categories\\categorypaths::serverpath","devise\\media\\categories\\categorypaths::browserpath","devise\\media\\categories\\manager::__construct","devise\\media\\categories\\manager::storenewcategory","devise\\media\\categories\\manager::destroycategory","devise\\media\\categories\\manager::renamecategory","devise\\media\\categories\\responsehandler::__construct","devise\\media\\categories\\responsehandler::requeststore","devise\\media\\categories\\responsehandler::requestdestroy","devise\\media\\categories\\responsehandler::requestrename","devise\\media\\encoding\\encodingserviceprovider::boot","devise\\media\\encoding\\encodingserviceprovider::register","devise\\media\\encoding\\encodingserviceprovider::provides","devise\\media\\encoding\\zencoderjob::__construct","devise\\media\\encoding\\zencoderjob::create","devise\\media\\encoding\\zencoderjob::handle","devise\\media\\encoding\\zencodernotificationscontroller::__construct","devise\\media\\encoding\\zencodernotificationscontroller::store","devise\\media\\files\\filedownloader::__construct","devise\\media\\files\\filedownloader::download","devise\\media\\files\\filesystem::search","devise\\media\\files\\filesystem::rename","devise\\media\\files\\manager::__construct","devise\\media\\files\\manager::saveuploadedfile","devise\\media\\files\\manager::renameuploadedfile","devise\\media\\files\\manager::removeuploadedfile","devise\\media\\files\\repository::__construct","devise\\media\\files\\repository::compileindexdata","devise\\media\\files\\responsehandler::__construct","devise\\media\\files\\responsehandler::requestupload","devise\\media\\files\\responsehandler::requestrename","devise\\media\\files\\responsehandler::requestremove","devise\\media\\images\\images::copyimage","devise\\media\\images\\images::cropimage","devise\\media\\images\\images::resizeimage","devise\\media\\images\\images::cropandresizeimage","devise\\media\\images\\images::saveimage","devise\\media\\images\\images::makethumbnailimage","devise\\media\\images\\manager::__construct","devise\\media\\images\\manager::extractimagesforcallback","devise\\media\\images\\manager::getimageurl","devise\\media\\images\\manager::cropandsavefile","devise\\media\\images\\responsehandler::__construct","devise\\media\\images\\responsehandler::requestcrop","devise\\media\\mediapaths::__construct","devise\\media\\mediapaths::basepath","devise\\media\\mediapaths::fileexists","devise\\media\\mediapaths::touch","devise\\media\\mediapaths::fileversioninfofromurl","devise\\media\\mediapaths::fileversioninfo","devise\\media\\mediapaths::makerelativepath","devise\\media\\mediapaths::zencoderurl","devise\\media\\mediapaths::downloadfromurl","devise\\media\\mediapaths::isurlpath","devise\\menus\\menucache::savemenu","devise\\menus\\menucache::loadmenu","devise\\menus\\menusmanager::__construct","devise\\menus\\menusmanager::createrules","devise\\menus\\menusmanager::createmenu","devise\\menus\\menusmanager::updaterules","devise\\menus\\menusmanager::updatemenu","devise\\menus\\menusrepository::__construct","devise\\menus\\menusrepository::menus","devise\\menus\\menusrepository::findbyid","devise\\menus\\menusrepository::findmenubyname","devise\\menus\\menusrepository::buildmenu","devise\\menus\\menusrepository::getchildrenmenuitems","devise\\menus\\menusrepository::getsiblingmenuitems","devise\\menus\\menusresponsehandler::__construct","devise\\menus\\menusresponsehandler::requeststore","devise\\menus\\menusresponsehandler::requestupdate","devise\\pages\\collections\\collectionfields::__construct","devise\\pages\\collections\\collectionfields::__get","devise\\pages\\collections\\collectionfieldsfactory::__construct","devise\\pages\\collections\\collectionfieldsfactory::createfromcollectioninstance","devise\\pages\\collections\\collectionsmanager::__construct","devise\\pages\\collections\\collectionsmanager::createnewinstance","devise\\pages\\collections\\collectionsmanager::updateinstancesort","devise\\pages\\collections\\collectionsmanager::updateinstancename","devise\\pages\\collections\\collectionsmanager::removeinstance","devise\\pages\\collections\\collectionsrepository::__construct","devise\\pages\\collections\\collectionsrepository::getinstances","devise\\pages\\collections\\collectionsrepository::findcollectionsforpageversionid","devise\\pages\\collections\\collectionsrepository::findcollectionsforpageversion","devise\\pages\\collections\\collectionsrepository::findcollectioninstancesforcollectionsetidandpageversionid","devise\\pages\\collections\\responsehandler::__construct","devise\\pages\\collections\\responsehandler::requeststoreinstance","devise\\pages\\collections\\responsehandler::updatesortorder","devise\\pages\\collections\\responsehandler::renameinstance","devise\\pages\\collections\\responsehandler::requestdeleteinstance","devise\\pages\\fields\\fieldmanager::__construct","devise\\pages\\fields\\fieldmanager::findorcreatefield","devise\\pages\\fields\\fieldmanager::updatefield","devise\\pages\\fields\\fieldvalue::__construct","devise\\pages\\fields\\fieldvalue::__tostring","devise\\pages\\fields\\fieldvalue::__get","devise\\pages\\fields\\fieldvalue::merge","devise\\pages\\fields\\fieldvalue::tojson","devise\\pages\\fields\\fieldvalue::__call","devise\\pages\\fields\\fieldsrepository::__construct","devise\\pages\\fields\\fieldsrepository::findfieldbykeyandpageversion","devise\\pages\\fields\\fieldsrepository::findtrashedfieldbykeyandpageversion","devise\\pages\\fields\\fieldsrepository::findtrashedglobalfieldbykeyandlanguage","devise\\pages\\fields\\fieldsrepository::findfieldbyid","devise\\pages\\fields\\fieldsrepository::findfieldbyidandscope","devise\\pages\\fields\\fieldsrepository::findtrashedfieldbyidandscope","devise\\pages\\fields\\fieldsrepository::findfieldbyglobalkeyandlanguage","devise\\pages\\fields\\fieldsresponsehandler::__construct","devise\\pages\\fields\\fieldsresponsehandler::requestupdate","devise\\pages\\fields\\imagefieldupdated::__construct","devise\\pages\\fields\\imagefieldupdated::handle","devise\\pages\\fields\\videofieldupdated::__construct","devise\\pages\\fields\\videofieldupdated::handle","devise\\pages\\interrupter\\block::__construct","devise\\pages\\interrupter\\block::start","devise\\pages\\interrupter\\block::stop","devise\\pages\\interrupter\\block::addtag","devise\\pages\\interrupter\\block::addblock","devise\\pages\\interrupter\\block::getstartingposition","devise\\pages\\interrupter\\block::getstartblock","devise\\pages\\interrupter\\block::getstopblock","devise\\pages\\interrupter\\block::getblocks","devise\\pages\\interrupter\\block::gettags","devise\\pages\\interrupter\\blockfactory::__construct","devise\\pages\\interrupter\\blockfactory::createblock","devise\\pages\\interrupter\\devisebladecompiler::__construct","devise\\pages\\interrupter\\devisebladecompiler::compile","devise\\pages\\interrupter\\devisetag::__construct","devise\\pages\\interrupter\\devisetag::tagbindingtype","devise\\pages\\interrupter\\devisetag::hiddenplaceholderstr","devise\\pages\\interrupter\\devisetag::addtodevisepagestr","devise\\pages\\interrupter\\devisetag::replacetaginview","devise\\pages\\interrupter\\devisetag::assertvalidkey","devise\\pages\\interrupter\\dvspagedata::collectionsjson","devise\\pages\\interrupter\\dvspagedata::bindingsjson","devise\\pages\\interrupter\\dvspagedata::addcollection","devise\\pages\\interrupter\\dvspagedata::addbinding","devise\\pages\\interrupter\\nodes\\node::__construct","devise\\pages\\interrupter\\nodes\\nodefactory::createnodefromregexmatch","devise\\pages\\interrupter\\viewopener::__construct","devise\\pages\\interrupter\\viewopener::open","devise\\pages\\pagecontroller::__construct","devise\\pages\\pagecontroller::show","devise\\pages\\pagecontroller::retrieveresponse","devise\\pages\\pagemanager::__construct","devise\\pages\\pagemanager::createnewpage","devise\\pages\\pagemanager::updatepage","devise\\pages\\pagemanager::destroypage","devise\\pages\\pagemanager::copypage","devise\\pages\\pagemanager::updatepageversiondates","devise\\pages\\pageresponsehandler::__construct","devise\\pages\\pageresponsehandler::requestcreatenewpage","devise\\pages\\pageresponsehandler::requestupdatepage","devise\\pages\\pageresponsehandler::requestdestroypage","devise\\pages\\pageresponsehandler::requestcopypage","devise\\pages\\pageresponsehandler::requeststorepageversion","devise\\pages\\pageresponsehandler::requestpagelist","devise\\pages\\pageresponsehandler::requestupdatepageversiondates","devise\\pages\\pageresponsehandler::requesttogglepageversionshare","devise\\pages\\pageversionmanager::__construct","devise\\pages\\pageversionmanager::createnewpageversion","devise\\pages\\pageversionmanager::createdefaultpageversion","devise\\pages\\pageversionmanager::copypageversiontoanotherpage","devise\\pages\\pageversionmanager::copypageversion","devise\\pages\\pageversionmanager::updatepageversiondates","devise\\pages\\pageversionmanager::destroypageversion","devise\\pages\\pageversionmanager::togglepageversionpreviewshare","devise\\pages\\pageversionsrepository::__construct","devise\\pages\\pageversionsrepository::getunscheduledpageversions","devise\\pages\\pagesrepository::__construct","devise\\pages\\pagesrepository::find","devise\\pages\\pagesrepository::findbyroutename","devise\\pages\\pagesrepository::findbyroutenameandpreviewhash","devise\\pages\\pagesrepository::findlocalizedpage","devise\\pages\\pagesrepository::pages","devise\\pages\\pagesrepository::availablelanguagesforpage","devise\\pages\\pagesrepository::getpageversions","devise\\pages\\pagesrepository::getroutelist","devise\\pages\\pagesrepository::getlivepageversion","devise\\pages\\pagesrepository::getpageversionbyname","devise\\pages\\pagesrepository::getpageslist","devise\\pages\\pagesrepository::availableviewslist","devise\\pages\\pagesserviceprovider::boot","devise\\pages\\pagesserviceprovider::register","devise\\pages\\pagesserviceprovider::provides","devise\\pages\\viewvars\\databuilder::__construct","devise\\pages\\viewvars\\databuilder::compile","devise\\pages\\viewvars\\databuilder::setdata","devise\\pages\\viewvars\\databuilder::getdata","devise\\pages\\viewvars\\databuilder::getvalue","devise\\pages\\viewvars\\datacrawler::extract","devise\\pages\\viewvars\\viewvarcomposer::__construct","devise\\pages\\viewvars\\viewvarcomposer::compose","devise\\search\\pagesearch::scopesearch","devise\\search\\pagination::make","devise\\search\\pagination::links","devise\\search\\pagination::toarray","devise\\search\\pagination::appends","devise\\search\\pagination::getiterator","devise\\search\\pagination::tojson","devise\\search\\searchablemodeltrait::scopesearch","devise\\search\\universalsearch::__construct","devise\\search\\universalsearch::register","devise\\search\\universalsearch::search","devise\\search\\universalsearchprovider::boot","devise\\search\\universalsearchprovider::register","devise\\search\\universalsearchprovider::provides","devise\\sidebar\\responsehandler::__construct","devise\\sidebar\\responsehandler::requestsidebarpartial","devise\\sidebar\\responsehandler::requestelementpartial","devise\\sidebar\\responsehandler::requestelementgridpartial","devise\\sidebar\\sidebardata::__construct","devise\\sidebar\\sidebardatatranslator::__construct","devise\\sidebar\\sidebardatatranslator::translatefrominputarray","devise\\sidebar\\sidebardatatranslator::translatecollectiondata","devise\\sidebar\\sidebarmanager::__construct","devise\\sidebar\\sidebarmanager::fetchpartialview","devise\\sidebar\\sidebarmanager::fetchelementview","devise\\sidebar\\sidebarmanager::fetchelementgridview","devise\\sidebar\\sidebarserviceprovider::boot","devise\\sidebar\\sidebarserviceprovider::register","devise\\sidebar\\sidebarserviceprovider::provides","devise\\sidebar\\snippetbladecompiler::compile","devise\\support\\deviseexception::getfacaderoot","devise\\support\\deviseresponse::getfacaderoot","devise\\support\\deviseresponse::macro","devise\\support\\deviseresponse::hasmacro","devise\\support\\deviseresponse::make","devise\\support\\deviseresponse::view","devise\\support\\deviseresponse::json","devise\\support\\deviseresponse::jsonp","devise\\support\\deviseresponse::stream","devise\\support\\deviseresponse::download","devise\\support\\devisevalidationexception::__construct","devise\\support\\devisevalidationexception::geterrors","devise\\support\\framework::__get","devise\\support\\sortable\\eloquentbuilder::paginate","devise\\support\\sortable\\eloquentmodel::newquery","devise\\support\\sortable\\filter::__construct","devise\\support\\sortable\\filter::getfield","devise\\support\\sortable\\link::__construct","devise\\support\\sortable\\link::getclearsortlink","devise\\support\\sortable\\link::getlink","devise\\support\\sortable\\manager::__construct","devise\\support\\sortable\\manager::getismulti","devise\\support\\sortable\\manager::setismulti","devise\\support\\sortable\\manager::getkey","devise\\support\\sortable\\manager::setkey","devise\\support\\sortable\\manager::addtostack","devise\\support\\sortable\\manager::removefromstack","devise\\support\\sortable\\manager::getstack","devise\\support\\sortable\\manager::clearstack","devise\\support\\sortable\\sort::__construct","devise\\support\\sortable\\sort::link","devise\\support\\sortable\\sort::clearsortlink","devise\\support\\sortable\\sort::filter","devise\\support\\sortable\\sort::setdefaultorderby","devise\\support\\sortable\\sort::handlesorting","devise\\support\\sortable\\sort::handlefiltering","devise\\support\\sortable\\sortableserviceprovider::boot","devise\\support\\sortable\\sortableserviceprovider::register","devise\\support\\sortable\\sortableserviceprovider::provides","devise\\support\\supportserviceprovider::boot","devise\\support\\supportserviceprovider::register","devise\\support\\supportserviceprovider::provides","devise\\users\\deviseusercontroller::__construct","devise\\users\\deviseusercontroller::index","devise\\users\\deviseusercontroller::create","devise\\users\\deviseusercontroller::store","devise\\users\\deviseusercontroller::edit","devise\\users\\deviseusercontroller::update","devise\\users\\deviseusercontroller::show","devise\\users\\deviseusercontroller::confirmdestroy","devise\\users\\deviseusercontroller::postdestroy","devise\\users\\deviseusercontroller::editpassword","devise\\users\\deviseusercontroller::updatepassword","devise\\users\\deviseusercontroller::login","devise\\users\\deviseusercontroller::postlogin","devise\\users\\deviseusercontroller::postlogout","devise\\users\\deviseusercontroller::register","devise\\users\\deviseusercontroller::postregister","devise\\users\\deviseusercontroller::forgotpassword","devise\\users\\deviseusercontroller::resendactivation","devise\\users\\deviseusercontroller::postresendactivation","devise\\users\\deviseusercontroller::remind","devise\\users\\deviseusercontroller::postremind","devise\\users\\deviseusercontroller::reset","devise\\users\\deviseusercontroller::postreset","devise\\users\\deviseusercontroller::activate","devise\\users\\deviseusercontroller::clearunactivatedusers","devise\\users\\groups\\groupmanager::__construct","devise\\users\\groups\\groupmanager::createrules","devise\\users\\groups\\groupmanager::creategroup","devise\\users\\groups\\groupmanager::updaterules","devise\\users\\groups\\groupmanager::updategroup","devise\\users\\groups\\groupmanager::destroygroup","devise\\users\\groups\\groupsrepository::__construct","devise\\users\\groups\\groupsrepository::findbyid","devise\\users\\groups\\groupsrepository::findbyname","devise\\users\\groups\\groupsrepository::grouplist","devise\\users\\groups\\groupsrepository::groups","devise\\users\\groups\\groupsrepository::grouplistforuser","devise\\users\\groups\\groupsresponsehandler::__construct","devise\\users\\groups\\groupsresponsehandler::requestcreategroup","devise\\users\\groups\\groupsresponsehandler::requestupdategroup","devise\\users\\groups\\groupsresponsehandler::requestdestroygroup","devise\\users\\permissions\\redirecthandler::__construct","devise\\users\\permissions\\redirecthandler::redirect","devise\\users\\permissions\\rulelist::__construct","devise\\users\\permissions\\rulelist::__call","devise\\users\\permissions\\rulelist::isloggedin","devise\\users\\permissions\\rulelist::isingroup","devise\\users\\permissions\\rulelist::isnotingroup","devise\\users\\permissions\\rulelist::hasusername","devise\\users\\permissions\\rulelist::hasemail","devise\\users\\permissions\\rulelist::hasfieldvalue","devise\\users\\permissions\\rulelist::showdevisespan","devise\\users\\permissions\\rulemanager::__construct","devise\\users\\permissions\\rulemanager::getrules","devise\\users\\permissions\\rulemanager::getclosure","devise\\users\\permissions\\rulemanager::addrule","devise\\users\\permissions\\rulemanager::getcondition","devise\\users\\permissions\\rulemanager::runcondition","devise\\users\\permissions\\rulemanager::executecondition","devise\\users\\permissions\\rulemanager::evaluateresults","devise\\users\\sessions\\sessionsrepository::__construct","devise\\users\\sessions\\sessionsrepository::login","devise\\users\\sessions\\sessionsrepository::logout","devise\\users\\sessions\\sessionsrepository::register","devise\\users\\sessions\\sessionsrepository::resendactivation","devise\\users\\sessions\\sessionsrepository::remind","devise\\users\\sessions\\sessionsrepository::reset","devise\\users\\sessions\\sessionsrepository::activate","devise\\users\\sessions\\sessionsrepository::removeunactivatedusers","devise\\users\\sessions\\sessionsrepository::validatecredentials","devise\\users\\sessions\\sessionsrepository::getrememberme","devise\\users\\userhelper::__construct","devise\\users\\userhelper::__call","devise\\users\\userhelper::currentuser","devise\\users\\userhelper::currentuserid","devise\\users\\userhelper::checkconditions","devise\\users\\userhelper::checkrule","devise\\users\\usermanager::__construct","devise\\users\\usermanager::createrules","devise\\users\\usermanager::createuser","devise\\users\\usermanager::updaterules","devise\\users\\usermanager::updateuser","devise\\users\\usermanager::destroyuser","devise\\users\\usermanager::activate","devise\\users\\usermanager::generateactivatecode","devise\\users\\userserviceprovider::boot","devise\\users\\userserviceprovider::register","devise\\users\\userserviceprovider::provides","devise\\users\\usersrepository::__construct","devise\\users\\usersrepository::retrievecurrentuser","devise\\users\\usersrepository::retrievecurrentuserid","devise\\users\\usersrepository::findbyid","devise\\users\\usersrepository::users","devise\\users\\usersrepository::findbyemail","devise\\users\\usersresponsehandler::__construct","devise\\users\\usersresponsehandler::executelogout","devise\\users\\usersresponsehandler::executelogin","devise\\users\\usersresponsehandler::requestcreateuser","devise\\users\\usersresponsehandler::requestupdateuser","devise\\users\\usersresponsehandler::requestdestroyuser"],
        'info': [["Devise","","Devise.html","","",3],["Devise\\Calendar","","Devise\/Calendar.html","","",3],["Devise\\Cli","","Devise\/Cli.html","","",3],["Devise\\Languages","","Devise\/Languages.html","","",3],["Devise\\Media","","Devise\/Media.html","","",3],["Devise\\Media\\Categories","","Devise\/Media\/Categories.html","","",3],["Devise\\Media\\Encoding","","Devise\/Media\/Encoding.html","","",3],["Devise\\Media\\Files","","Devise\/Media\/Files.html","","",3],["Devise\\Media\\Images","","Devise\/Media\/Images.html","","",3],["Devise\\Menus","","Devise\/Menus.html","","",3],["Devise\\Pages","","Devise\/Pages.html","","",3],["Devise\\Pages\\Collections","","Devise\/Pages\/Collections.html","","",3],["Devise\\Pages\\Fields","","Devise\/Pages\/Fields.html","","",3],["Devise\\Pages\\Interrupter","","Devise\/Pages\/Interrupter.html","","",3],["Devise\\Pages\\Interrupter\\Exceptions","","Devise\/Pages\/Interrupter\/Exceptions.html","","",3],["Devise\\Pages\\Interrupter\\Nodes","","Devise\/Pages\/Interrupter\/Nodes.html","","",3],["Devise\\Pages\\Viewvars","","Devise\/Pages\/Viewvars.html","","",3],["Devise\\Search","","Devise\/Search.html","","",3],["Devise\\Sidebar","","Devise\/Sidebar.html","","",3],["Devise\\Support","","Devise\/Support.html","","",3],["Devise\\Support\\Sortable","","Devise\/Support\/Sortable.html","","",3],["Devise\\Users","","Devise\/Users.html","","",3],["Devise\\Users\\Groups","","Devise\/Users\/Groups.html","","",3],["Devise\\Users\\Permissions","","Devise\/Users\/Permissions.html","","",3],["Devise\\Users\\Sessions","","Devise\/Users\/Sessions.html","","",3],["CalendarResponseHandler","Devise\\Calendar","Devise\/Calendar\/CalendarResponseHandler.html","","Handles the ajax calls made to backend from the Full",1],["PageVersionSource","Devise\\Calendar","Devise\/Calendar\/PageVersionSource.html","","Purpose of this class is to source out events that",1],["Source","Devise\\Calendar","Devise\/Calendar\/Source.html","","A source is a plage to fetch events given a start and",1],["InstallerCommand","Devise\\Cli","Devise\/Cli\/InstallerCommand.html"," < Command","",1],["DeviseServiceProvider","Devise","Devise\/DeviseServiceProvider.html"," < ServiceProvider","This class loads all the providers in other folders",1],["LanguageDetector","Devise\\Languages","Devise\/Languages\/LanguageDetector.html","","Language detector is used to determine the current",1],["LanguagesManager","Devise\\Languages","Devise\/Languages\/LanguagesManager.html","","The languages manager allows us to manage the all things",1],["LanguagesRepository","Devise\\Languages","Devise\/Languages\/LanguagesRepository.html","","The langauges repository provides methods to fetch",1],["LanguagesResponseHandler","Devise\\Languages","Devise\/Languages\/LanguagesResponseHandler.html","","Handles responses for language routes.",1],["LocaleDetector","Devise\\Languages","Devise\/Languages\/LocaleDetector.html","","Locales are shorthand 2 letter strings for a language\/region.",1],["CategoryAlreadyExistsException","Devise\\Media\\Categories","Devise\/Media\/Categories\/CategoryAlreadyExistsException.html"," < DeviseException","Class CategoryAlreadyExistsException is thrown whenever",1],["CategoryPaths","Devise\\Media\\Categories","Devise\/Media\/Categories\/CategoryPaths.html","","Class CategoryPaths converts dot paths to real paths",1],["Manager","Devise\\Media\\Categories","Devise\/Media\/Categories\/Manager.html","","Class Manager manages categories.",1],["ResponseHandler","Devise\\Media\\Categories","Devise\/Media\/Categories\/ResponseHandler.html","","Class ResponseHandler handles the controller side of",1],["EncodingServiceProvider","Devise\\Media\\Encoding","Devise\/Media\/Encoding\/EncodingServiceProvider.html"," < ServiceProvider","Registers a new devise.video.encoder we can use globally",1],["InvalidEncodingSettingsException","Devise\\Media\\Encoding","Devise\/Media\/Encoding\/InvalidEncodingSettingsException.html"," < DeviseException","Class InvalidEncodingSettingsException is thrown in",1],["ZencoderJob","Devise\\Media\\Encoding","Devise\/Media\/Encoding\/ZencoderJob.html","","Class ZencoderJob handles incoming requests that have",1],["ZencoderNotificationsController","Devise\\Media\\Encoding","Devise\/Media\/Encoding\/ZencoderNotificationsController.html"," < Controller","Class ZencoderNotificationsController handles incoming",1],["FileDownloader","Devise\\Media\\Files","Devise\/Media\/Files\/FileDownloader.html","","Class FileDownloader downloads a file from the internet",1],["Filesystem","Devise\\Media\\Files","Devise\/Media\/Files\/Filesystem.html"," < Filesystem","Class Filesystem inherits from Illuminate\\Filesystem\\Filesystem",1],["InvalidFileException","Devise\\Media\\Files","Devise\/Media\/Files\/InvalidFileException.html"," < DeviseException","Class InvalidFileException is thrown in MediaPaths",1],["Manager","Devise\\Media\\Files","Devise\/Media\/Files\/Manager.html","","Class Manager",1],["Repository","Devise\\Media\\Files","Devise\/Media\/Files\/Repository.html","","Class Repository builds a complex array of data around",1],["ResponseHandler","Devise\\Media\\Files","Devise\/Media\/Files\/ResponseHandler.html","","Class ResponseHandler handles controller part of media",1],["Images","Devise\\Media\\Images","Devise\/Media\/Images\/Images.html","","",1],["Manager","Devise\\Media\\Images","Devise\/Media\/Images\/Manager.html","","Class Manager takes care of image management.",1],["ResponseHandler","Devise\\Media\\Images","Devise\/Media\/Images\/ResponseHandler.html","","Class ResponseHandler handles requests (controller\/route)",1],["MediaPaths","Devise\\Media","Devise\/Media\/MediaPaths.html","","Class MediaPaths abstracts away paths that we can use",1],["MenuCache","Devise\\Menus","Devise\/Menus\/MenuCache.html","","",1],["MenusManager","Devise\\Menus","Devise\/Menus\/MenusManager.html","","",1],["MenusRepository","Devise\\Menus","Devise\/Menus\/MenusRepository.html","","Class MenusRepository retrieves things related to DvsMenu",1],["MenusResponseHandler","Devise\\Menus","Devise\/Menus\/MenusResponseHandler.html","","Class MenusResponseHandler is used to store and update",1],["CollectionFields","Devise\\Pages\\Collections","Devise\/Pages\/Collections\/CollectionFields.html","","This classes purpose is to act as a container for fields",1],["CollectionFieldsFactory","Devise\\Pages\\Collections","Devise\/Pages\/Collections\/CollectionFieldsFactory.html","","Collection fields are objects that allow us to traverse",1],["CollectionsManager","Devise\\Pages\\Collections","Devise\/Pages\/Collections\/CollectionsManager.html","","Manage collections in the database by creating, updating",1],["CollectionsRepository","Devise\\Pages\\Collections","Devise\/Pages\/Collections\/CollectionsRepository.html","","Retreives collection instances and sets and fields",1],["ResponseHandler","Devise\\Pages\\Collections","Devise\/Pages\/Collections\/ResponseHandler.html","","Handle responses for collection instances",1],["DuplicateFieldKeyException","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/DuplicateFieldKeyException.html"," < DeviseException","Whenever we see a duplicate field key on a page throw",1],["FieldManager","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/FieldManager.html","","A field manager has the responsibilty of managing fields",1],["FieldValue","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/FieldValue.html","","Field value is an object that holds json values for",1],["FieldsRepository","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/FieldsRepository.html","","Fields repository allows us to retrieve fields that",1],["FieldsResponseHandler","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/FieldsResponseHandler.html","","",1],["ImageFieldUpdated","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/ImageFieldUpdated.html","","This class should be registered in a service provider",1],["VideoFieldUpdated","Devise\\Pages\\Fields","Devise\/Pages\/Fields\/VideoFieldUpdated.html","","When the video field is updated we will call this class",1],["Block","Devise\\Pages\\Interrupter","Devise\/Pages\/Interrupter\/Block.html","","Class Block is a container class that represents the",1],["BlockFactory","Devise\\Pages\\Interrupter","Devise\/Pages\/Interrupter\/BlockFactory.html","","the purpose this class is to take a blade view and",1],["DeviseBladeCompiler","Devise\\Pages\\Interrupter","Devise\/Pages\/Interrupter\/DeviseBladeCompiler.html","","Class DeviseBladeCompiler is used for Blade::extend()",1],["DeviseTag","Devise\\Pages\\Interrupter","Devise\/Pages\/Interrupter\/DeviseTag.html","","convert this node data into useful key, type, humanName,",1],["DvsPageData","Devise\\Pages\\Interrupter","Devise\/Pages\/Interrupter\/DvsPageData.html","","A storage container class that stores collections and",1],["DuplicateDeviseKeyException","Devise\\Pages\\Interrupter\\Exceptions","Devise\/Pages\/Interrupter\/Exceptions\/DuplicateDeviseKeyException.html"," < DeviseException","This exception is thrown anytime there are multiple",1],["InvalidDeviseKeyException","Devise\\Pages\\Interrupter\\Exceptions","Devise\/Pages\/Interrupter\/Exceptions\/InvalidDeviseKeyException.html"," < DeviseException","This exception is thrown anytime the devise key is",1],["InvalidDeviseTagException","Devise\\Pages\\Interrupter\\Exceptions","Devise\/Pages\/Interrupter\/Exceptions\/InvalidDeviseTagException.html"," < DeviseException","Thrown whenever the devise tag is malformed.",1],["DeviseTagNode","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/DeviseTagNode.html"," < Node","Class DeviseTagNode is a node that matches \" data-devise=...\"",1],["EndForeachNode","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/EndForeachNode.html"," < Node","Class EndForeachNode is a node that matches \"@endforeach\"",1],["EndIfNode","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/EndIfNode.html"," < Node","Class EndIfNode is a node that matches \"@endif\" in",1],["ForeachNode","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/ForeachNode.html"," < Node","Class ForeachNode is a node that matches \"@foreach\"",1],["IfNode","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/IfNode.html"," < Node","Class IfNode is a node that matches \"@if (...)\" in",1],["IncludeNode","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/IncludeNode.html"," < Node","Class IncludeNode is a node that matches \"@include",1],["Node","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/Node.html","","A node is a piece of string\/code from the blade template",1],["NodeFactory","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/NodeFactory.html","","Class NodeFactory creates new nodes given matches",1],["UnidentifiedNodeException","Devise\\Pages\\Interrupter\\Nodes","Devise\/Pages\/Interrupter\/Nodes\/UnidentifiedNodeException.html"," < DeviseException","Class UnidentifiedNodeException is thrown in NodeFactory",1],["ViewOpener","Devise\\Pages\\Interrupter","Devise\/Pages\/Interrupter\/ViewOpener.html","","Class ViewOpener opens a view for an include statement",1],["PageController","Devise\\Pages","Devise\/Pages\/PageController.html"," < Controller","All pages registered in dvs_pages database table come",1],["PageManager","Devise\\Pages","Devise\/Pages\/PageManager.html","","Class PageManager manages the creating of new pages,",1],["PageNotFoundException","Devise\\Pages","Devise\/Pages\/PageNotFoundException.html"," < DeviseException","This exception is thrown whenever the page is not found",1],["PageResponseHandler","Devise\\Pages","Devise\/Pages\/PageResponseHandler.html","","Response handler takes care of creating,updating, destroying",1],["PageVersionManager","Devise\\Pages","Devise\/Pages\/PageVersionManager.html","","Class PageVersionManager manages all things page versions",1],["PageVersionsRepository","Devise\\Pages","Devise\/Pages\/PageVersionsRepository.html","","Class PageVersionsRepository is used to search and",1],["PagesException","Devise\\Pages","Devise\/Pages\/PagesException.html"," < DeviseException","This exception is thrown whenever there are problems",1],["PagesRepository","Devise\\Pages","Devise\/Pages\/PagesRepository.html","","Class PagesRepository is used to search and retrieve",1],["PagesServiceProvider","Devise\\Pages","Devise\/Pages\/PagesServiceProvider.html"," < ServiceProvider","Registers the Pages service provider.",1],["DataBuilder","Devise\\Pages\\Viewvars","Devise\/Pages\/Viewvars\/DataBuilder.html","","This builds the variables that are found in view-vars.php",1],["DataCrawler","Devise\\Pages\\Viewvars","Devise\/Pages\/Viewvars\/DataCrawler.html","","Purpose of this class is to turn something like this",1],["DeviseRouteConfigurationException","Devise\\Pages\\Viewvars","Devise\/Pages\/Viewvars\/DeviseRouteConfigurationException.html"," < DeviseException","Class DeviseRouteConfigurationException is thrown in",1],["ViewvarComposer","Devise\\Pages\\Viewvars","Devise\/Pages\/Viewvars\/ViewvarComposer.html","","View composer here is registered in the Devise\\Pages\\PagesServiceProvider.php",1],["PageSearch","Devise\\Search","Devise\/Search\/PageSearch.html"," < DvsPage","Class PageSearch is an example of how you could search",1],["Pagination","Devise\\Search","Devise\/Search\/Pagination.html","","Class Pagination is used so we can paginate search",1],["SearchableModelTrait","Devise\\Search","Devise\/Search\/SearchableModelTrait.html","","Class SearchableModelTrait can be applied to an eloquent",1],["UniversalSearch","Devise\\Search","Devise\/Search\/UniversalSearch.html","","Class UniversalSearch lets us register new searchable",1],["UniversalSearchProvider","Devise\\Search","Devise\/Search\/UniversalSearchProvider.html"," < ServiceProvider","Class DeviseUniversalSearchProvider registers the universal",1],["ResponseHandler","Devise\\Sidebar","Devise\/Sidebar\/ResponseHandler.html","","Class ResponseHandler is the controller action that",1],["SidebarData","Devise\\Sidebar","Devise\/Sidebar\/SidebarData.html","","Class SidebarData is a structured data object whose",1],["SidebarDataTranslator","Devise\\Sidebar","Devise\/Sidebar\/SidebarDataTranslator.html","","The translator's job is to translate input into something",1],["SidebarManager","Devise\\Sidebar","Devise\/Sidebar\/SidebarManager.html","","Class SidebarManager fetches the partial sidebar view",1],["SidebarServiceProvider","Devise\\Sidebar","Devise\/Sidebar\/SidebarServiceProvider.html"," < ServiceProvider","This class loads all the providers in other folders",1],["SnippetBladeCompiler","Devise\\Sidebar","Devise\/Sidebar\/SnippetBladeCompiler.html","","Class SnippetBladeCompiler converts",1],["DeviseException","Devise\\Support","Devise\/Support\/DeviseException.html"," < Exception","Class DeviseException should be the base class exception",1],["DeviseResponse","Devise\\Support","Devise\/Support\/DeviseResponse.html","","Class DeviseResponse for some reason Illuminate\\Support\\Facades\\Response",1],["DeviseValidationException","Devise\\Support","Devise\/Support\/DeviseValidationException.html"," < DeviseException","This validation exception is thrown when ever there",1],["Framework","Devise\\Support","Devise\/Support\/Framework.html","","Class Framework wraps important components that we",1],["EloquentBuilder","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/EloquentBuilder.html"," < Builder","Class EloquentBuilder is ran on paginate queries only",1],["EloquentModel","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/EloquentModel.html"," < Model","Class EloquentModel is the base model in devise and",1],["Filter","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/Filter.html","","Class Filter",1],["Link","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/Link.html","","Class Link returns html  anchor tags when given",1],["Manager","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/Manager.html","","Class Manager changes the cookie\/session keys for multisorts",1],["Sort","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/Sort.html","","Class Sort handles creating links and filters for us",1],["SortableFacade","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/SortableFacade.html"," < Facade","Class SortableFacade",1],["SortableServiceProvider","Devise\\Support\\Sortable","Devise\/Support\/Sortable\/SortableServiceProvider.html"," < ServiceProvider","Class SortableServiceProvider registers the Sort facade",1],["SupportServiceProvider","Devise\\Support","Devise\/Support\/SupportServiceProvider.html"," < ServiceProvider","Class SupportServiceProvider registers support components",1],["DeviseUser","Devise\\Users","Devise\/Users\/DeviseUser.html"," < Facade","",1],["DeviseUserController","Devise\\Users","Devise\/Users\/DeviseUserController.html"," < Controller","",1],["GroupManager","Devise\\Users\\Groups","Devise\/Users\/Groups\/GroupManager.html","","Class GroupManager manages the creating, updating,",1],["GroupsRepository","Devise\\Users\\Groups","Devise\/Users\/Groups\/GroupsRepository.html","","",1],["GroupsResponseHandler","Devise\\Users\\Groups","Devise\/Users\/Groups\/GroupsResponseHandler.html","","",1],["RedirectHandler","Devise\\Users\\Permissions","Devise\/Users\/Permissions\/RedirectHandler.html","","Class RedirectHandler handles redirecting",1],["RuleList","Devise\\Users\\Permissions","Devise\/Users\/Permissions\/RuleList.html","","Class RuleList maintains list of built-in and user",1],["RuleManager","Devise\\Users\\Permissions","Devise\/Users\/Permissions\/RuleManager.html","","Class RuleManager manages retrieval, creation\/addition,",1],["RuleManagerFacade","Devise\\Users\\Permissions","Devise\/Users\/Permissions\/RuleManagerFacade.html"," < Facade","",1],["SessionsRepository","Devise\\Users\\Sessions","Devise\/Users\/Sessions\/SessionsRepository.html","","Class SessionsRepository is used to search and retrieve",1],["UserHelper","Devise\\Users","Devise\/Users\/UserHelper.html","","Helper allows specific methods to be easily accessible",1],["UserManager","Devise\\Users","Devise\/Users\/UserManager.html","","Class UserManager manages the creating of new users,",1],["UserServiceProvider","Devise\\Users","Devise\/Users\/UserServiceProvider.html"," < ServiceProvider","Class UserServiceProvider registers the devise user,",1],["UsersRepository","Devise\\Users","Devise\/Users\/UsersRepository.html","","Class UsersRepository is used to search and retrieve",1],["UsersResponseHandler","Devise\\Users","Devise\/Users\/UsersResponseHandler.html","","Response handler takes care of user login\/logout, creating,",1],["CalendarResponseHandler::__construct","Devise\\Calendar\\CalendarResponseHandler","Devise\/Calendar\/CalendarResponseHandler.html#method___construct","(<a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework, <a href=\"Devise\/Calendar\/PageVersionSource.html\"><abbr title=\"Devise\\Calendar\\PageVersionSource\">PageVersionSource<\/abbr><\/a> $PageVersionSource)","Construct a new CalendarResponseHandler",2],["CalendarResponseHandler::requestPageVersionEventSource","Devise\\Calendar\\CalendarResponseHandler","Devise\/Calendar\/CalendarResponseHandler.html#method_requestPageVersionEventSource","(array $input)","Requests the json for a given start and stop date for",2],["CalendarResponseHandler::requestPageVersionEventUpdate","Devise\\Calendar\\CalendarResponseHandler","Devise\/Calendar\/CalendarResponseHandler.html#method_requestPageVersionEventUpdate","(int $id, array $input)","Requests that a page version event's start and end",2],["PageVersionSource::__construct","Devise\\Calendar\\PageVersionSource","Devise\/Calendar\/PageVersionSource.html#method___construct","(<abbr title=\"Devise\\Calendar\\DvsPageVersion\">DvsPageVersion<\/abbr> $PageVersion, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Create a new PageVersionSource",2],["PageVersionSource::fetchEvents","Devise\\Calendar\\PageVersionSource","Devise\/Calendar\/PageVersionSource.html#method_fetchEvents","(string $start, string $end)","A Source must be able to fetch events.",2],["PageVersionSource::updatePageVersion","Devise\\Calendar\\PageVersionSource","Devise\/Calendar\/PageVersionSource.html#method_updatePageVersion","(int $id, string $start, string $end, boolean $published)","This is here so that we can update a page version event",2],["Source::fetchEvents","Devise\\Calendar\\Source","Devise\/Calendar\/Source.html#method_fetchEvents","(string $start, string $end)","Returns a list of events in FullCalendar Event format.",2],["InstallerCommand::configure","Devise\\Cli\\InstallerCommand","Devise\/Cli\/InstallerCommand.html#method_configure","()","",2],["InstallerCommand::execute","Devise\\Cli\\InstallerCommand","Devise\/Cli\/InstallerCommand.html#method_execute","(<abbr title=\"Symfony\\Component\\Console\\Input\\InputInterface\">InputInterface<\/abbr> $input, <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","",2],["DeviseServiceProvider::boot","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["DeviseServiceProvider::register","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_register","()","Register the service provider.",2],["DeviseServiceProvider::provides","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["DeviseServiceProvider::registerEncoding","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_registerEncoding","()","Register encoding service provider",2],["DeviseServiceProvider::registerSidebar","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_registerSidebar","()","Register the sidebar provider",2],["DeviseServiceProvider::registerDeviseUniversalSearch","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_registerDeviseUniversalSearch","()","Register universal search service provider",2],["DeviseServiceProvider::registerUsers","Devise\\DeviseServiceProvider","Devise\/DeviseServiceProvider.html#method_registerUsers","()","Register users service provider",2],["LanguageDetector::__construct","Devise\\Languages\\LanguageDetector","Devise\/Languages\/LanguageDetector.html#method___construct","(<a href=\"Devise\/Languages\/LocaleDetector.html\"><abbr title=\"Devise\\Languages\\LocaleDetector\">LocaleDetector<\/abbr><\/a> $LocaleDetector, <abbr title=\"Devise\\Languages\\DvsLanguage\">DvsLanguage<\/abbr> $Language, $Config = null)","Create a new Language Detector",2],["LanguageDetector::current","Devise\\Languages\\LanguageDetector","Devise\/Languages\/LanguageDetector.html#method_current","()","Get the current language for the locale this will probably",2],["LanguageDetector::universal","Devise\\Languages\\LanguageDetector","Devise\/Languages\/LanguageDetector.html#method_universal","()","Get the universal language that we fallback to...",2],["LanguageDetector::update","Devise\\Languages\\LanguageDetector","Devise\/Languages\/LanguageDetector.html#method_update","(<abbr title=\"Devise\\Languages\\Language\">Language<\/abbr> $language)","Update the current language for this browser",2],["LanguageDetector::primaryLanguageId","Devise\\Languages\\LanguageDetector","Devise\/Languages\/LanguageDetector.html#method_primaryLanguageId","()","Returns the primary language id for this system",2],["LanguagesManager::__construct","Devise\\Languages\\LanguagesManager","Devise\/Languages\/LanguagesManager.html#method___construct","(<abbr title=\"Devise\\Languages\\DvsLanguage\">DvsLanguage<\/abbr> $Language)","Construct a new language manager",2],["LanguagesManager::modifyActiveFlag","Devise\\Languages\\LanguagesManager","Devise\/Languages\/LanguagesManager.html#method_modifyActiveFlag","(<abbr title=\"Devise\\Languages\\$id\">$id<\/abbr> $id, <abbr title=\"Devise\\Languages\\$isActive\">$isActive<\/abbr> $isActive)","Updates the active field of a language",2],["LanguagesRepository::__construct","Devise\\Languages\\LanguagesRepository","Devise\/Languages\/LanguagesRepository.html#method___construct","(<abbr title=\"DvsLanguage\">DvsLanguage<\/abbr> $Language, <a href=\"Devise\/Languages\/LanguageDetector.html\"><abbr title=\"Devise\\Languages\\LanguageDetector\">LanguageDetector<\/abbr><\/a> $Detector, <abbr title=\"DvsPage\">DvsPage<\/abbr> $Page, <abbr title=\"DvsPageVersion\">DvsPageVersion<\/abbr> $PageVersion)","Construct language repository",2],["LanguagesRepository::languages","Devise\\Languages\\LanguagesRepository","Devise\/Languages\/LanguagesRepository.html#method_languages","()","Paginated list of languages",2],["LanguagesRepository::activeLanguageList","Devise\\Languages\\LanguagesRepository","Devise\/Languages\/LanguagesRepository.html#method_activeLanguageList","()","List of active languages",2],["LanguagesRepository::languageSelectorOptions","Devise\\Languages\\LanguagesRepository","Devise\/Languages\/LanguagesRepository.html#method_languageSelectorOptions","($page)","List of options for the a language selector",2],["LanguagesRepository::currentLanguage","Devise\\Languages\\LanguagesRepository","Devise\/Languages\/LanguagesRepository.html#method_currentLanguage","()","Magical method that gets the language for the current",2],["LanguagesRepository::findLanguageForPageVersion","Devise\\Languages\\LanguagesRepository","Devise\/Languages\/LanguagesRepository.html#method_findLanguageForPageVersion","(int $pageVersionId)","Finds the language for a given page version",2],["LanguagesResponseHandler::__construct","Devise\\Languages\\LanguagesResponseHandler","Devise\/Languages\/LanguagesResponseHandler.html#method___construct","(<abbr title=\"Illuminate\\Routing\\Redirector\">Redirector<\/abbr> $Redirect, <a href=\"Devise\/Languages\/LanguagesManager.html\"><abbr title=\"Devise\\Languages\\LanguagesManager\">LanguagesManager<\/abbr><\/a> $Manager)","Construct new response handler",2],["LanguagesResponseHandler::requestPatchLanguage","Devise\\Languages\\LanguagesResponseHandler","Devise\/Languages\/LanguagesResponseHandler.html#method_requestPatchLanguage","(integer $id, array $input)","Patch a language's active flag",2],["LocaleDetector::current","Devise\\Languages\\LocaleDetector","Devise\/Languages\/LocaleDetector.html#method_current","()","Get the current locale.",2],["LocaleDetector::cookie","Devise\\Languages\\LocaleDetector","Devise\/Languages\/LocaleDetector.html#method_cookie","()","Get the locale from a cookie",2],["LocaleDetector::universal","Devise\\Languages\\LocaleDetector","Devise\/Languages\/LocaleDetector.html#method_universal","()","Get the universal locale set by developer and laravel",2],["LocaleDetector::header","Devise\\Languages\\LocaleDetector","Devise\/Languages\/LocaleDetector.html#method_header","()","Get locale from header accept string",2],["LocaleDetector::segment","Devise\\Languages\\LocaleDetector","Devise\/Languages\/LocaleDetector.html#method_segment","()","We don't use this, but we could use it later if we",2],["LocaleDetector::update","Devise\\Languages\\LocaleDetector","Devise\/Languages\/LocaleDetector.html#method_update","(string $locale)","Updates the locale stored in this cookie",2],["CategoryPaths::__construct","Devise\\Media\\Categories\\CategoryPaths","Devise\/Media\/Categories\/CategoryPaths.html#method___construct","(null $config = null)","Create a new category path",2],["CategoryPaths::fromDot","Devise\\Media\\Categories\\CategoryPaths","Devise\/Media\/Categories\/CategoryPaths.html#method_fromDot","(string $path)","Convert dots to slashes in the path",2],["CategoryPaths::toDot","Devise\\Media\\Categories\\CategoryPaths","Devise\/Media\/Categories\/CategoryPaths.html#method_toDot","(string $path)","Convert slashes into dots in the path",2],["CategoryPaths::serverPath","Devise\\Media\\Categories\\CategoryPaths","Devise\/Media\/Categories\/CategoryPaths.html#method_serverPath","(<abbr title=\"Devise\\Media\\Categories\\$path\">$path<\/abbr> $path)","Server path is the real path to the root media directory",2],["CategoryPaths::browserPath","Devise\\Media\\Categories\\CategoryPaths","Devise\/Media\/Categories\/CategoryPaths.html#method_browserPath","(<abbr title=\"Devise\\Media\\Categories\\$path\">$path<\/abbr> $path)","Browser path is the url path to this root media directory",2],["Manager::__construct","Devise\\Media\\Categories\\Manager","Devise\/Media\/Categories\/Manager.html#method___construct","(<a href=\"Devise\/Media\/Files\/Filesystem.html\"><abbr title=\"Devise\\Media\\Files\\Filesystem\">Filesystem<\/abbr><\/a> $Filesystem, <a href=\"Devise\/Media\/Categories\/CategoryPaths.html\"><abbr title=\"Devise\\Media\\Categories\\CategoryPaths\">CategoryPaths<\/abbr><\/a> $CategoryPaths)","Create a new category manager",2],["Manager::storeNewCategory","Devise\\Media\\Categories\\Manager","Devise\/Media\/Categories\/Manager.html#method_storeNewCategory","(<abbr title=\"Devise\\Media\\Categories\\$input\">$input<\/abbr> $input)","Stores the category in the filesystem",2],["Manager::destroyCategory","Devise\\Media\\Categories\\Manager","Devise\/Media\/Categories\/Manager.html#method_destroyCategory","(<abbr title=\"Devise\\Media\\Categories\\$input\">$input<\/abbr> $input)","Removes the category path",2],["Manager::renameCategory","Devise\\Media\\Categories\\Manager","Devise\/Media\/Categories\/Manager.html#method_renameCategory","(<abbr title=\"Devise\\Media\\Categories\\$path\">$path<\/abbr> $path, <abbr title=\"Devise\\Media\\Categories\\$newName\">$newName<\/abbr> $newName)","Renames a category path",2],["ResponseHandler::__construct","Devise\\Media\\Categories\\ResponseHandler","Devise\/Media\/Categories\/ResponseHandler.html#method___construct","(<a href=\"Devise\/Media\/Categories\/Manager.html\"><abbr title=\"Devise\\Media\\Categories\\Manager\">Manager<\/abbr><\/a> $CategoryManager, $Redirect = null)","Construct a new response handler for categories",2],["ResponseHandler::requestStore","Devise\\Media\\Categories\\ResponseHandler","Devise\/Media\/Categories\/ResponseHandler.html#method_requestStore","(<abbr title=\"Devise\\Media\\Categories\\$input\">$input<\/abbr> $input)","Request a category be stored",2],["ResponseHandler::requestDestroy","Devise\\Media\\Categories\\ResponseHandler","Devise\/Media\/Categories\/ResponseHandler.html#method_requestDestroy","(<abbr title=\"Devise\\Media\\Categories\\$input\">$input<\/abbr> $input)","Request a category be destroyed",2],["ResponseHandler::requestRename","Devise\\Media\\Categories\\ResponseHandler","Devise\/Media\/Categories\/ResponseHandler.html#method_requestRename","(<abbr title=\"Devise\\Media\\Categories\\$input\">$input<\/abbr> $input)","Request a category be renamed",2],["EncodingServiceProvider::boot","Devise\\Media\\Encoding\\EncodingServiceProvider","Devise\/Media\/Encoding\/EncodingServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["EncodingServiceProvider::register","Devise\\Media\\Encoding\\EncodingServiceProvider","Devise\/Media\/Encoding\/EncodingServiceProvider.html#method_register","()","Register the service provider.",2],["EncodingServiceProvider::provides","Devise\\Media\\Encoding\\EncodingServiceProvider","Devise\/Media\/Encoding\/EncodingServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ZencoderJob::__construct","Devise\\Media\\Encoding\\ZencoderJob","Devise\/Media\/Encoding\/ZencoderJob.html#method___construct","(string $apiKey, array $notifications, <a href=\"Devise\/Media\/Files\/FileDownloader.html\"><abbr title=\"Devise\\Media\\Files\\FileDownloader\">FileDownloader<\/abbr><\/a> $FileDownloader, null $Event = null)","Create a new ZencoderJob",2],["ZencoderJob::create","Devise\\Media\\Encoding\\ZencoderJob","Devise\/Media\/Encoding\/ZencoderJob.html#method_create","(string $filePath, array $settings)","Create a new job with this file path and settings",2],["ZencoderJob::handle","Devise\\Media\\Encoding\\ZencoderJob","Devise\/Media\/Encoding\/ZencoderJob.html#method_handle","(<abbr title=\"Devise\\Media\\Encoding\\$output\">$output<\/abbr> $output, <abbr title=\"Devise\\Media\\Encoding\\$storagePath\">$storagePath<\/abbr> $storagePath)","Fire events when you see this job has been called back",2],["ZencoderNotificationsController::__construct","Devise\\Media\\Encoding\\ZencoderNotificationsController","Devise\/Media\/Encoding\/ZencoderNotificationsController.html#method___construct","(null $App = null, null $Response = null, null $Input = null)","Construct a new controller",2],["ZencoderNotificationsController::store","Devise\\Media\\Encoding\\ZencoderNotificationsController","Devise\/Media\/Encoding\/ZencoderNotificationsController.html#method_store","()","Stores this video file from zencoder servers onto our",2],["FileDownloader::__construct","Devise\\Media\\Files\\FileDownloader","Devise\/Media\/Files\/FileDownloader.html#method___construct","()","Create a new FileDownloader",2],["FileDownloader::download","Devise\\Media\\Files\\FileDownloader","Devise\/Media\/Files\/FileDownloader.html#method_download","(string $url, string $toPath, string $filename)","Download a file from the given $url and save it to",2],["Filesystem::search","Devise\\Media\\Files\\Filesystem","Devise\/Media\/Files\/Filesystem.html#method_search","(string $directory, string $pattern)","Search this directory for this pattern",2],["Filesystem::rename","Devise\\Media\\Files\\Filesystem","Devise\/Media\/Files\/Filesystem.html#method_rename","(string $path, string $target)","Relocates a path from a location to a new location",2],["Manager::__construct","Devise\\Media\\Files\\Manager","Devise\/Media\/Files\/Manager.html#method___construct","(<a href=\"Devise\/Media\/Files\/Filesystem.html\"><abbr title=\"Devise\\Media\\Files\\Filesystem\">Filesystem<\/abbr><\/a> $Filesystem, <a href=\"Devise\/Media\/Categories\/CategoryPaths.html\"><abbr title=\"Devise\\Media\\Categories\\CategoryPaths\">CategoryPaths<\/abbr><\/a> $CategoryPaths, <a href=\"Devise\/Media\/Images\/Images.html\"><abbr title=\"Devise\\Media\\Images\\Images\">Images<\/abbr><\/a> $Image, $Config = null)","Construct a new File manager",2],["Manager::saveUploadedFile","Devise\\Media\\Files\\Manager","Devise\/Media\/Files\/Manager.html#method_saveUploadedFile","(<abbr title=\"Devise\\Media\\Files\\$input\">$input<\/abbr> $input)","Saves the uploaded file to the media directory",2],["Manager::renameUploadedFile","Devise\\Media\\Files\\Manager","Devise\/Media\/Files\/Manager.html#method_renameUploadedFile","(string $filepath, string $newpath)","Renames an uploaded file",2],["Manager::removeUploadedFile","Devise\\Media\\Files\\Manager","Devise\/Media\/Files\/Manager.html#method_removeUploadedFile","(string $filepath)","Remove uploaded files from the \/media directory",2],["Repository::__construct","Devise\\Media\\Files\\Repository","Devise\/Media\/Files\/Repository.html#method___construct","(<a href=\"Devise\/Media\/Files\/Filesystem.html\"><abbr title=\"Devise\\Media\\Files\\Filesystem\">Filesystem<\/abbr><\/a> $Filesystem, null $Config = null, null $Request = null, null $URL = null)","Constructs a new repository",2],["Repository::compileIndexData","Devise\\Media\\Files\\Repository","Devise\/Media\/Files\/Repository.html#method_compileIndexData","($input = null)","Not really sure, gonna revisit this later...",2],["ResponseHandler::__construct","Devise\\Media\\Files\\ResponseHandler","Devise\/Media\/Files\/ResponseHandler.html#method___construct","(<a href=\"Devise\/Media\/Files\/Manager.html\"><abbr title=\"Devise\\Media\\Files\\Manager\">Manager<\/abbr><\/a> $FileManager, null $Redirect = null)","Construct a new response handler",2],["ResponseHandler::requestUpload","Devise\\Media\\Files\\ResponseHandler","Devise\/Media\/Files\/ResponseHandler.html#method_requestUpload","(<abbr title=\"Devise\\Media\\Files\\$input\">$input<\/abbr> $input)","Requests a file upload",2],["ResponseHandler::requestRename","Devise\\Media\\Files\\ResponseHandler","Devise\/Media\/Files\/ResponseHandler.html#method_requestRename","(<abbr title=\"Devise\\Media\\Files\\$input\">$input<\/abbr> $input)","Requests a file rename",2],["ResponseHandler::requestRemove","Devise\\Media\\Files\\ResponseHandler","Devise\/Media\/Files\/ResponseHandler.html#method_requestRemove","(<abbr title=\"Devise\\Media\\Files\\$input\">$input<\/abbr> $input)","Requests a file removal",2],["Images::copyImage","Devise\\Media\\Images\\Images","Devise\/Media\/Images\/Images.html#method_copyImage","(string $fromImagePath, string $toImagePath)","Copies an image from one location to another location,",2],["Images::cropImage","Devise\\Media\\Images\\Images","Devise\/Media\/Images\/Images.html#method_cropImage","(string|<a href=\"http:\/\/php.net\/Imagick\"><abbr title=\"Imagick\">Imagick<\/abbr><\/a> $imagePath, integer $cropWidth, integer $cropHeight, integer $cropX, integer $cropY)","Crop this image path to crop dimensions, these dimensions",2],["Images::resizeImage","Devise\\Media\\Images\\Images","Devise\/Media\/Images\/Images.html#method_resizeImage","(string|<a href=\"http:\/\/php.net\/Imagick\"><abbr title=\"Imagick\">Imagick<\/abbr><\/a> $imagePath, integer $width, integer $height)","Resize this image path to specified width and height",2],["Images::cropAndResizeImage","Devise\\Media\\Images\\Images","Devise\/Media\/Images\/Images.html#method_cropAndResizeImage","(string $imagePath, integer $width, integer $height, integer $cropWidth, integer $cropHeight, integer $cropX, integer $cropY)","Crops the image path and then resizes, used by the",2],["Images::saveImage","Devise\\Media\\Images\\Images","Devise\/Media\/Images\/Images.html#method_saveImage","(<a href=\"http:\/\/php.net\/Imagick\"><abbr title=\"Imagick\">Imagick<\/abbr><\/a> $image, <abbr title=\"Devise\\Media\\Images\\$path\">$path<\/abbr> $path)","Save the image to this path, also recursively creates",2],["Images::makeThumbnailImage","Devise\\Media\\Images\\Images","Devise\/Media\/Images\/Images.html#method_makeThumbnailImage","(<abbr title=\"Devise\\Media\\Images\\$originalPath\">$originalPath<\/abbr> $originalPath, string $newPath, string $mime = &#039;image&#039;)","Makes a thumbnail out of a file",2],["Manager::__construct","Devise\\Media\\Images\\Manager","Devise\/Media\/Images\/Manager.html#method___construct","(<a href=\"Devise\/Media\/Files\/Filesystem.html\"><abbr title=\"Devise\\Media\\Files\\Filesystem\">Filesystem<\/abbr><\/a> $Filesystem, <a href=\"Devise\/Media\/Categories\/CategoryPaths.html\"><abbr title=\"Devise\\Media\\Categories\\CategoryPaths\">CategoryPaths<\/abbr><\/a> $CategoryPaths, <a href=\"Devise\/Media\/Images\/Images.html\"><abbr title=\"Devise\\Media\\Images\\Images\">Images<\/abbr><\/a> $Images, <abbr title=\"Illuminate\\Config\\Repository\">Repository<\/abbr> $Config = null)","Construct a new image manager",2],["Manager::extractImagesForCallback","Devise\\Media\\Images\\Manager","Devise\/Media\/Images\/Manager.html#method_extractImagesForCallback","(<abbr title=\"Devise\\Media\\Images\\$input\">$input<\/abbr> $input)","Not sure what this is for.",2],["Manager::getImageUrl","Devise\\Media\\Images\\Manager","Devise\/Media\/Images\/Manager.html#method_getImageUrl","(<abbr title=\"Devise\\Media\\Images\\$input\">$input<\/abbr> $input)","Image url for a given category and image",2],["Manager::cropAndSaveFile","Devise\\Media\\Images\\Manager","Devise\/Media\/Images\/Manager.html#method_cropAndSaveFile","(<abbr title=\"Devise\\Media\\Images\\$input\">$input<\/abbr> $input)","Crop and save an image",2],["ResponseHandler::__construct","Devise\\Media\\Images\\ResponseHandler","Devise\/Media\/Images\/ResponseHandler.html#method___construct","(<a href=\"Devise\/Media\/Images\/Manager.html\"><abbr title=\"Devise\\Media\\Images\\Manager\">Manager<\/abbr><\/a> $ImageManager, null $Redirect = null, null $URL = null)","Construct a new image response handler",2],["ResponseHandler::requestCrop","Devise\\Media\\Images\\ResponseHandler","Devise\/Media\/Images\/ResponseHandler.html#method_requestCrop","(<abbr title=\"Devise\\Media\\Images\\$input\">$input<\/abbr> $input)","Request a crop",2],["MediaPaths::__construct","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method___construct","(string $basepath = null, string $baseurl = null, null $Config = null)","Create a new Media Path Helper the purpose of this",2],["MediaPaths::basePath","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_basePath","()","Gets the basepath for us",2],["MediaPaths::fileExists","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_fileExists","(<abbr title=\"Devise\\Media\\$mediapath\">$mediapath<\/abbr> $mediapath)","Check to see if a file exists or not",2],["MediaPaths::touch","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_touch","(<abbr title=\"Devise\\Media\\$mediapath\">$mediapath<\/abbr> $mediapath)","Create an empty file in this location",2],["MediaPaths::fileVersionInfoFromUrl","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_fileVersionInfoFromUrl","(<abbr title=\"Devise\\Media\\$url\">$url<\/abbr> $url)","Gets the versioned path to this $url path",2],["MediaPaths::fileVersionInfo","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_fileVersionInfo","(<abbr title=\"Devise\\Media\\$filePath\">$filePath<\/abbr> $filePath)","Gets the versioned path to this file",2],["MediaPaths::makeRelativePath","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_makeRelativePath","(<abbr title=\"Devise\\Media\\$path\">$path<\/abbr> $path)","Make this path relative to public directory",2],["MediaPaths::zencoderUrl","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_zencoderUrl","(<abbr title=\"Devise\\Media\\$filename\">$filename<\/abbr> $filename)","Returns the zencoder url for this filename",2],["MediaPaths::downloadFromUrl","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_downloadFromUrl","($path, $newFilePath = null)","Downloads the image so that we can re-use it later",2],["MediaPaths::isUrlPath","Devise\\Media\\MediaPaths","Devise\/Media\/MediaPaths.html#method_isUrlPath","(<abbr title=\"Devise\\Media\\$url\">$url<\/abbr> $url)","Returns true or false depending on if this is an image",2],["MenuCache::saveMenu","Devise\\Menus\\MenuCache","Devise\/Menus\/MenuCache.html#method_saveMenu","($menu, $activeItemChildren, $activeItemSiblings)","",2],["MenuCache::loadMenu","Devise\\Menus\\MenuCache","Devise\/Menus\/MenuCache.html#method_loadMenu","($name)","",2],["MenusManager::__construct","Devise\\Menus\\MenusManager","Devise\/Menus\/MenusManager.html#method___construct","(<abbr title=\"Devise\\Menus\\DvsMenu\">DvsMenu<\/abbr> $Menu, <abbr title=\"Devise\\Menus\\DvsMenuItem\">DvsMenuItem<\/abbr> $MenuItem, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new user manager",2],["MenusManager::createRules","Devise\\Menus\\MenusManager","Devise\/Menus\/MenusManager.html#method_createRules","()","These are create rules for a menu",2],["MenusManager::createMenu","Devise\\Menus\\MenusManager","Devise\/Menus\/MenusManager.html#method_createMenu","(array $input)","Creates a new menu",2],["MenusManager::updateRules","Devise\\Menus\\MenusManager","Devise\/Menus\/MenusManager.html#method_updateRules","(integer $id)","These are the update rules for a menu given an id",2],["MenusManager::updateMenu","Devise\\Menus\\MenusManager","Devise\/Menus\/MenusManager.html#method_updateMenu","(<abbr title=\"Devise\\Menus\\$id\">$id<\/abbr> $id, array $input)","Updates the active field of a Menu",2],["MenusRepository::__construct","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method___construct","(<abbr title=\"Devise\\Menus\\DvsMenu\">DvsMenu<\/abbr> $Menu, <abbr title=\"Devise\\Menus\\DvsMenuItem\">DvsMenuItem<\/abbr> $MenuItem, <a href=\"Devise\/Languages\/LanguageDetector.html\"><abbr title=\"Devise\\Languages\\LanguageDetector\">LanguageDetector<\/abbr><\/a> $LanguageDetector, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","",2],["MenusRepository::menus","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method_menus","()","Returns a Collection of DvsMenus",2],["MenusRepository::findById","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method_findById","(<abbr title=\"Devise\\Menus\\$id\">$id<\/abbr> $id)","Finds DvsMenu by an integer id",2],["MenusRepository::findMenuByName","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method_findMenuByName","(string $name)","Find menu using name value",2],["MenusRepository::buildMenu","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method_buildMenu","(<abbr title=\"Devise\\Menus\\$name\">$name<\/abbr> $name, int $depth = 2, null $page = null)","Build a menu from it's name",2],["MenusRepository::getChildrenMenuItems","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method_getChildrenMenuItems","(<abbr title=\"Devise\\Menus\\$name\">$name<\/abbr> $name)","Get the children menu items of a menu name",2],["MenusRepository::getSiblingMenuItems","Devise\\Menus\\MenusRepository","Devise\/Menus\/MenusRepository.html#method_getSiblingMenuItems","(<abbr title=\"Devise\\Menus\\$name\">$name<\/abbr> $name)","Get menu siblings",2],["MenusResponseHandler::__construct","Devise\\Menus\\MenusResponseHandler","Devise\/Menus\/MenusResponseHandler.html#method___construct","(<abbr title=\"Illuminate\\Routing\\Redirector\">Redirector<\/abbr> $Redirect, <a href=\"Devise\/Menus\/MenusManager.html\"><abbr title=\"Devise\\Menus\\MenusManager\">MenusManager<\/abbr><\/a> $Manager)","Construct new response handler",2],["MenusResponseHandler::requestStore","Devise\\Menus\\MenusResponseHandler","Devise\/Menus\/MenusResponseHandler.html#method_requestStore","(array $input)","Create a new menu then redirect to edit page",2],["MenusResponseHandler::requestUpdate","Devise\\Menus\\MenusResponseHandler","Devise\/Menus\/MenusResponseHandler.html#method_requestUpdate","(integer $id, array $input)","Update a Menu",2],["CollectionFields::__construct","Devise\\Pages\\Collections\\CollectionFields","Devise\/Pages\/Collections\/CollectionFields.html#method___construct","(array $fields)","Create a new collection fields object from an array",2],["CollectionFields::__get","Devise\\Pages\\Collections\\CollectionFields","Devise\/Pages\/Collections\/CollectionFields.html#method___get","(string $name)","This magic method is used whenever we attempt to access",2],["CollectionFieldsFactory::__construct","Devise\\Pages\\Collections\\CollectionFieldsFactory","Devise\/Pages\/Collections\/CollectionFieldsFactory.html#method___construct","(<abbr title=\"Devise\\Pages\\Collections\\DvsField\">DvsField<\/abbr> $Field)","Create a new factory",2],["CollectionFieldsFactory::createFromCollectionInstance","Devise\\Pages\\Collections\\CollectionFieldsFactory","Devise\/Pages\/Collections\/CollectionFieldsFactory.html#method_createFromCollectionInstance","(<abbr title=\"Devise\\Pages\\Collections\\CollectionInstance\">CollectionInstance<\/abbr> $instance)","Creates collection fields object from a collection",2],["CollectionsManager::__construct","Devise\\Pages\\Collections\\CollectionsManager","Devise\/Pages\/Collections\/CollectionsManager.html#method___construct","(<abbr title=\"Devise\\Pages\\Collections\\DvsCollectionInstance\">DvsCollectionInstance<\/abbr> $CollectionInstance)","Create a new collections manager object",2],["CollectionsManager::createNewInstance","Devise\\Pages\\Collections\\CollectionsManager","Devise\/Pages\/Collections\/CollectionsManager.html#method_createNewInstance","(array $inputData)","Create a new collection instance",2],["CollectionsManager::updateInstanceSort","Devise\\Pages\\Collections\\CollectionsManager","Devise\/Pages\/Collections\/CollectionsManager.html#method_updateInstanceSort","($id, $sort)","Updates the instance with input data",2],["CollectionsManager::updateInstanceName","Devise\\Pages\\Collections\\CollectionsManager","Devise\/Pages\/Collections\/CollectionsManager.html#method_updateInstanceName","($id, $name)","Update the collection instance name",2],["CollectionsManager::removeInstance","Devise\\Pages\\Collections\\CollectionsManager","Devise\/Pages\/Collections\/CollectionsManager.html#method_removeInstance","(integer $id)","Remove instance from database",2],["CollectionsRepository::__construct","Devise\\Pages\\Collections\\CollectionsRepository","Devise\/Pages\/Collections\/CollectionsRepository.html#method___construct","(<abbr title=\"Devise\\Pages\\Collections\\DvsCollectionInstance\">DvsCollectionInstance<\/abbr> $CollectionInstance, <abbr title=\"Devise\\Pages\\Collections\\DvsCollectionSet\">DvsCollectionSet<\/abbr> $CollectionSet, <abbr title=\"Devise\\Pages\\Collections\\DvsField\">DvsField<\/abbr> $Field, <abbr title=\"Devise\\Pages\\Collections\\DvsPageVersion\">DvsPageVersion<\/abbr> $PageVersion, <a href=\"Devise\/Pages\/Collections\/CollectionFieldsFactory.html\"><abbr title=\"Devise\\Pages\\Collections\\CollectionFieldsFactory\">CollectionFieldsFactory<\/abbr><\/a> $CollectionFieldsFactory)","Construct a new repository with all the dependencies",2],["CollectionsRepository::getInstances","Devise\\Pages\\Collections\\CollectionsRepository","Devise\/Pages\/Collections\/CollectionsRepository.html#method_getInstances","(int $pageVersionId, int $collectionSetId)","This is used by the \/admin\/pages\/{pageVersionId}\/collections\/{collectionSetId}\/instances",2],["CollectionsRepository::findCollectionsForPageVersionId","Devise\\Pages\\Collections\\CollectionsRepository","Devise\/Pages\/Collections\/CollectionsRepository.html#method_findCollectionsForPageVersionId","(int $pageVersionId)","When we only have the pageVersionId we can use this",2],["CollectionsRepository::findCollectionsForPageVersion","Devise\\Pages\\Collections\\CollectionsRepository","Devise\/Pages\/Collections\/CollectionsRepository.html#method_findCollectionsForPageVersion","(<abbr title=\"Devise\\Pages\\Collections\\DvsPageVersion\">DvsPageVersion<\/abbr> $pageVersion)","Get the list of collections for this page",2],["CollectionsRepository::findCollectionInstancesForCollectionSetIdAndPageVersionId","Devise\\Pages\\Collections\\CollectionsRepository","Devise\/Pages\/Collections\/CollectionsRepository.html#method_findCollectionInstancesForCollectionSetIdAndPageVersionId","(int $collectionSetId, int $pageVersionId)","Get the instances + fields for this collection set",2],["ResponseHandler::__construct","Devise\\Pages\\Collections\\ResponseHandler","Devise\/Pages\/Collections\/ResponseHandler.html#method___construct","(<a href=\"Devise\/Pages\/Collections\/CollectionsManager.html\"><abbr title=\"Devise\\Pages\\Collections\\CollectionsManager\">CollectionsManager<\/abbr><\/a> $CollectionsManager)","Construct a new Response Handler used by dvs_pages",2],["ResponseHandler::requestStoreInstance","Devise\\Pages\\Collections\\ResponseHandler","Devise\/Pages\/Collections\/ResponseHandler.html#method_requestStoreInstance","(integer $pageVersionId, integer $collectionSetId, array $input)","Stores the instance with given pageversion and collection",2],["ResponseHandler::updateSortOrder","Devise\\Pages\\Collections\\ResponseHandler","Devise\/Pages\/Collections\/ResponseHandler.html#method_updateSortOrder","(integer $pageVersionId, integer $collectionSetId, array $input)","Updates the sort order for a given instance",2],["ResponseHandler::renameInstance","Devise\\Pages\\Collections\\ResponseHandler","Devise\/Pages\/Collections\/ResponseHandler.html#method_renameInstance","(integer $pageVersionId, integer $collectionInstanceId, array $input)","Renames the instance with a better, faster, more improved",2],["ResponseHandler::requestDeleteInstance","Devise\\Pages\\Collections\\ResponseHandler","Devise\/Pages\/Collections\/ResponseHandler.html#method_requestDeleteInstance","(integer $collectionInstanceId)","Remove the collection instance from the database",2],["FieldManager::__construct","Devise\\Pages\\Fields\\FieldManager","Devise\/Pages\/Fields\/FieldManager.html#method___construct","(<abbr title=\"Devise\\Pages\\Fields\\DvsField\">DvsField<\/abbr> $Field, <abbr title=\"Devise\\Pages\\Fields\\DvsGlobalField\">DvsGlobalField<\/abbr> $GlobalField, <a href=\"Devise\/Pages\/Fields\/FieldsRepository.html\"><abbr title=\"Devise\\Pages\\Fields\\FieldsRepository\">FieldsRepository<\/abbr><\/a> $FieldsRepository, <a href=\"Devise\/Languages\/LanguagesRepository.html\"><abbr title=\"Devise\\Languages\\LanguagesRepository\">LanguagesRepository<\/abbr><\/a> $LanguagesRepository, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new Field Manager",2],["FieldManager::findOrCreateField","Devise\\Pages\\Fields\\FieldManager","Devise\/Pages\/Fields\/FieldManager.html#method_findOrCreateField","(array $input)","Find or create field given input",2],["FieldManager::updateField","Devise\\Pages\\Fields\\FieldManager","Devise\/Pages\/Fields\/FieldManager.html#method_updateField","(integer $fieldId, array $originalInput)","Updates the field",2],["FieldValue::__construct","Devise\\Pages\\Fields\\FieldValue","Devise\/Pages\/Fields\/FieldValue.html#method___construct","(string $json)","Create a new FieldValue object from json string",2],["FieldValue::__toString","Devise\\Pages\\Fields\\FieldValue","Devise\/Pages\/Fields\/FieldValue.html#method___toString","()","Convert to a empty string to avoid null pointer exceptions",2],["FieldValue::__get","Devise\\Pages\\Fields\\FieldValue","Devise\/Pages\/Fields\/FieldValue.html#method___get","(string $name)","Avoids null pointer exceptions by treating this like",2],["FieldValue::merge","Devise\\Pages\\Fields\\FieldValue","Devise\/Pages\/Fields\/FieldValue.html#method_merge","(array $input)","Merges in the array data into the field object json",2],["FieldValue::toJSON","Devise\\Pages\\Fields\\FieldValue","Devise\/Pages\/Fields\/FieldValue.html#method_toJSON","()","Returns this object as json string",2],["FieldValue::__call","Devise\\Pages\\Fields\\FieldValue","Devise\/Pages\/Fields\/FieldValue.html#method___call","(string $name, mixed $args)","Allows us to set default values on a key if we do not",2],["FieldsRepository::__construct","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method___construct","(<abbr title=\"Devise\\Pages\\Fields\\DvsField\">DvsField<\/abbr> $Field, <abbr title=\"Devise\\Pages\\Fields\\DvsGlobalField\">DvsGlobalField<\/abbr> $GlobalField)","Construct a new FieldsRepository",2],["FieldsRepository::findFieldByKeyAndPageVersion","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findFieldByKeyAndPageVersion","($key, $pageVersionId, $collectionInstanceId)","Find existing page field given key and pageId",2],["FieldsRepository::findTrashedFieldByKeyAndPageVersion","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findTrashedFieldByKeyAndPageVersion","($key, $pageVersionId)","Find existing page field (only if it has been trashed)",2],["FieldsRepository::findTrashedGlobalFieldByKeyAndLanguage","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findTrashedGlobalFieldByKeyAndLanguage","(string $key, integer $languageId)","Find existing global field (only if it has been trashed)",2],["FieldsRepository::findFieldById","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findFieldById","(integer $id)","Find the field by id",2],["FieldsRepository::findFieldByIdAndScope","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findFieldByIdAndScope","(integer $fieldId, string $fieldScope)","Find a field by it's id and scope (page or global)",2],["FieldsRepository::findTrashedFieldByIdAndScope","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findTrashedFieldByIdAndScope","(integer $fieldId, string $fieldScope)","Find a field by it's scope and included fields that",2],["FieldsRepository::findFieldByGlobalKeyAndLanguage","Devise\\Pages\\Fields\\FieldsRepository","Devise\/Pages\/Fields\/FieldsRepository.html#method_findFieldByGlobalKeyAndLanguage","(string $key, integer $languageId)","Find a field by it's global key and language id",2],["FieldsResponseHandler::__construct","Devise\\Pages\\Fields\\FieldsResponseHandler","Devise\/Pages\/Fields\/FieldsResponseHandler.html#method___construct","(<a href=\"Devise\/Pages\/Fields\/FieldManager.html\"><abbr title=\"Devise\\Pages\\Fields\\FieldManager\">FieldManager<\/abbr><\/a> $Manager)","Construct new response handler",2],["FieldsResponseHandler::requestUpdate","Devise\\Pages\\Fields\\FieldsResponseHandler","Devise\/Pages\/Fields\/FieldsResponseHandler.html#method_requestUpdate","(integer $fieldId, array $input)","Update field, creates a new version of the field this",2],["ImageFieldUpdated::__construct","Devise\\Pages\\Fields\\ImageFieldUpdated","Devise\/Pages\/Fields\/ImageFieldUpdated.html#method___construct","(<a href=\"Devise\/Media\/Images\/Images.html\"><abbr title=\"Devise\\Media\\Images\\Images\">Images<\/abbr><\/a> $Images, <a href=\"Devise\/Media\/MediaPaths.html\"><abbr title=\"Devise\\Media\\MediaPaths\">MediaPaths<\/abbr><\/a> $MediaPaths)","Constructs a new Image field updated event handler",2],["ImageFieldUpdated::handle","Devise\\Pages\\Fields\\ImageFieldUpdated","Devise\/Pages\/Fields\/ImageFieldUpdated.html#method_handle","($field, $input, $beforeChanges)","This is called anytime after we update an image field",2],["VideoFieldUpdated::__construct","Devise\\Pages\\Fields\\VideoFieldUpdated","Devise\/Pages\/Fields\/VideoFieldUpdated.html#method___construct","(<a href=\"Devise\/Media\/MediaPaths.html\"><abbr title=\"Devise\\Media\\MediaPaths\">MediaPaths<\/abbr><\/a> $MediaPaths, null $Encoder = null)","Construct a new VideoFieldUpdated instance",2],["VideoFieldUpdated::handle","Devise\\Pages\\Fields\\VideoFieldUpdated","Devise\/Pages\/Fields\/VideoFieldUpdated.html#method_handle","(<abbr title=\"Devise\\Pages\\Fields\\Field\">Field<\/abbr> $field, array $input)","This is called anytime after we update a video field",2],["Block::__construct","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method___construct","()","Construct a new block",2],["Block::start","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_start","(<a href=\"Devise\/Pages\/Interrupter\/Nodes\/Node.html\"><abbr title=\"Devise\\Pages\\Interrupter\\Nodes\\Node\">Node<\/abbr><\/a> $node)","Sets the starting node for this block",2],["Block::stop","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_stop","(<a href=\"Devise\/Pages\/Interrupter\/Nodes\/Node.html\"><abbr title=\"Devise\\Pages\\Interrupter\\Nodes\\Node\">Node<\/abbr><\/a> $node)","Sets the stopping node for this block.",2],["Block::addTag","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_addTag","(<a href=\"Devise\/Pages\/Interrupter\/Nodes\/Node.html\"><abbr title=\"Devise\\Pages\\Interrupter\\Nodes\\Node\">Node<\/abbr><\/a> $node)","Add a devise tag to this block",2],["Block::addBlock","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_addBlock","(<a href=\"Devise\/Pages\/Interrupter\/Block.html\"><abbr title=\"Devise\\Pages\\Interrupter\\Block\">Block<\/abbr><\/a> $block)","Add another nested block to this block",2],["Block::getStartingPosition","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_getStartingPosition","()","Gets the starting position of this block",2],["Block::getStartBlock","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_getStartBlock","()","Gets the starting node for block",2],["Block::getStopBlock","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_getStopBlock","()","Gets the stopping node for this block",2],["Block::getBlocks","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_getBlocks","()","All the children blocks of this block",2],["Block::getTags","Devise\\Pages\\Interrupter\\Block","Devise\/Pages\/Interrupter\/Block.html#method_getTags","(array $includeTypes = array(&#039;block&#039;))","Get all tags for all children blocks that have been",2],["BlockFactory::__construct","Devise\\Pages\\Interrupter\\BlockFactory","Devise\/Pages\/Interrupter\/BlockFactory.html#method___construct","(<a href=\"Devise\/Pages\/Interrupter\/Nodes\/NodeFactory.html\"><abbr title=\"Devise\\Pages\\Interrupter\\Nodes\\NodeFactory\">NodeFactory<\/abbr><\/a> $NodeFactory, <a href=\"Devise\/Pages\/Interrupter\/ViewOpener.html\"><abbr title=\"Devise\\Pages\\Interrupter\\ViewOpener\">ViewOpener<\/abbr><\/a> $ViewOpener)","Create a new block factory",2],["BlockFactory::createBlock","Devise\\Pages\\Interrupter\\BlockFactory","Devise\/Pages\/Interrupter\/BlockFactory.html#method_createBlock","($view, $includedViews = array())","Creates a block from the given view",2],["DeviseBladeCompiler::__construct","Devise\\Pages\\Interrupter\\DeviseBladeCompiler","Devise\/Pages\/Interrupter\/DeviseBladeCompiler.html#method___construct","(<a href=\"Devise\/Pages\/Interrupter\/BlockFactory.html\"><abbr title=\"Devise\\Pages\\Interrupter\\BlockFactory\">BlockFactory<\/abbr><\/a> $BlockFactory)","Constructs a new DeviseBladeCompiler",2],["DeviseBladeCompiler::compile","Devise\\Pages\\Interrupter\\DeviseBladeCompiler","Devise\/Pages\/Interrupter\/DeviseBladeCompiler.html#method_compile","(string $view)","Compile a blade view for the data-devise html data",2],["DeviseTag::__construct","Devise\\Pages\\Interrupter\\DeviseTag","Devise\/Pages\/Interrupter\/DeviseTag.html#method___construct","(<a href=\"Devise\/Pages\/Interrupter\/Nodes\/DeviseTagNode.html\"><abbr title=\"Devise\\Pages\\Interrupter\\Nodes\\DeviseTagNode\">DeviseTagNode<\/abbr><\/a> $node)","Create DeviseTag from this DeviseTag Node",2],["DeviseTag::tagBindingType","Devise\\Pages\\Interrupter\\DeviseTag","Devise\/Pages\/Interrupter\/DeviseTag.html#method_tagBindingType","()","DeviseTags can be either collections or simple bindings",2],["DeviseTag::hiddenPlaceHolderStr","Devise\\Pages\\Interrupter\\DeviseTag","Devise\/Pages\/Interrupter\/DeviseTag.html#method_hiddenPlaceHolderStr","()","String for this devise tag placeholder",2],["DeviseTag::addToDevisePageStr","Devise\\Pages\\Interrupter\\DeviseTag","Devise\/Pages\/Interrupter\/DeviseTag.html#method_addToDevisePageStr","()","The string which adds this to the devise container,",2],["DeviseTag::replaceTagInView","Devise\\Pages\\Interrupter\\DeviseTag","Devise\/Pages\/Interrupter\/DeviseTag.html#method_replaceTagInView","(string $view)","Replaces this tag inside of this view.",2],["DeviseTag::assertValidKey","Devise\\Pages\\Interrupter\\DeviseTag","Devise\/Pages\/Interrupter\/DeviseTag.html#method_assertValidKey","(string $key, string $message = null)","Assert this key is valid",2],["DvsPageData::collectionsJSON","Devise\\Pages\\Interrupter\\DvsPageData","Devise\/Pages\/Interrupter\/DvsPageData.html#method_collectionsJSON","()","Collections as json output",2],["DvsPageData::bindingsJSON","Devise\\Pages\\Interrupter\\DvsPageData","Devise\/Pages\/Interrupter\/DvsPageData.html#method_bindingsJSON","()","Bindings as json output",2],["DvsPageData::addCollection","Devise\\Pages\\Interrupter\\DvsPageData","Devise\/Pages\/Interrupter\/DvsPageData.html#method_addCollection","(string $collection, string $key, string $type, string $humanName, string $group, string $category, string $alternateTarget)","Add a collection to dvsPageData",2],["DvsPageData::addBinding","Devise\\Pages\\Interrupter\\DvsPageData","Devise\/Pages\/Interrupter\/DvsPageData.html#method_addBinding","(string $key, string $type, string $humanName, string $group, string $category, string $alternateTarget)","Add a binding to dvsPageData",2],["Node::__construct","Devise\\Pages\\Interrupter\\Nodes\\Node","Devise\/Pages\/Interrupter\/Nodes\/Node.html#method___construct","(string $matched, integer $position)","Creates a new Node object",2],["NodeFactory::createNodeFromRegexMatch","Devise\\Pages\\Interrupter\\Nodes\\NodeFactory","Devise\/Pages\/Interrupter\/Nodes\/NodeFactory.html#method_createNodeFromRegexMatch","(array $match)","",2],["ViewOpener::__construct","Devise\\Pages\\Interrupter\\ViewOpener","Devise\/Pages\/Interrupter\/ViewOpener.html#method___construct","(<abbr title=\"Devise\\Pages\\Interrupter\\Illuminate\\View\\FileViewFinder\">FileViewFinder<\/abbr> $finder = null)","Construct a new view opener",2],["ViewOpener::open","Devise\\Pages\\Interrupter\\ViewOpener","Devise\/Pages\/Interrupter\/ViewOpener.html#method_open","(<abbr title=\"Devise\\Pages\\Interrupter\\$includeStatement\">$includeStatement<\/abbr> $includeStatement, <abbr title=\"Devise\\Pages\\Interrupter\\$includedViews\">$includedViews<\/abbr> $includedViews)","Attempt to open the view path if something fails then",2],["PageController::__construct","Devise\\Pages\\PageController","Devise\/Pages\/PageController.html#method___construct","(<a href=\"Devise\/Pages\/PagesRepository.html\"><abbr title=\"Devise\\Pages\\PagesRepository\">PagesRepository<\/abbr><\/a> $PagesRepository, <a href=\"Devise\/Pages\/Viewvars\/DataBuilder.html\"><abbr title=\"Devise\\Pages\\Viewvars\\DataBuilder\">DataBuilder<\/abbr><\/a> $DataBuilder, null $Input = null, null $View = null, null $Route = null, null $Redirect = null)","Creates a new DvsPagesController instance.",2],["PageController::show","Devise\\Pages\\PageController","Devise\/Pages\/PageController.html#method_show","()","Displays details of a page",2],["PageController::retrieveResponse","Devise\\Pages\\PageController","Devise\/Pages\/PageController.html#method_retrieveResponse","(<abbr title=\"DvsPage\">DvsPage<\/abbr> $page)","This retrieves a page with all the viewvars set on",2],["PageManager::__construct","Devise\\Pages\\PageManager","Devise\/Pages\/PageManager.html#method___construct","(<abbr title=\"Devise\\Pages\\DvsPage\">DvsPage<\/abbr> $Page, <a href=\"Devise\/Pages\/PageVersionManager.html\"><abbr title=\"Devise\\Pages\\PageVersionManager\">PageVersionManager<\/abbr><\/a> $PageVersionManager, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new page manager",2],["PageManager::createNewPage","Devise\\Pages\\PageManager","Devise\/Pages\/PageManager.html#method_createNewPage","(array $input)","Validates and creates a page with the given input",2],["PageManager::updatePage","Devise\\Pages\\PageManager","Devise\/Pages\/PageManager.html#method_updatePage","(integer $id, array $input)","Validates and updates a page with the given input",2],["PageManager::destroyPage","Devise\\Pages\\PageManager","Devise\/Pages\/PageManager.html#method_destroyPage","(integer $id)","Destroys a page",2],["PageManager::copyPage","Devise\\Pages\\PageManager","Devise\/Pages\/PageManager.html#method_copyPage","(integer $fromPageId, array $input)","Takes the input provided and runs the create method",2],["PageManager::updatePageVersionDates","Devise\\Pages\\PageManager","Devise\/Pages\/PageManager.html#method_updatePageVersionDates","(int $pageVersionId, array $input)","Updates the page version dates",2],["PageResponseHandler::__construct","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method___construct","(<a href=\"Devise\/Pages\/PageManager.html\"><abbr title=\"Devise\\Pages\\PageManager\">PageManager<\/abbr><\/a> $PageManager, <a href=\"Devise\/Pages\/PagesRepository.html\"><abbr title=\"Devise\\Pages\\PagesRepository\">PagesRepository<\/abbr><\/a> $PagesRepository, <a href=\"Devise\/Pages\/PageVersionManager.html\"><abbr title=\"Devise\\Pages\\PageVersionManager\">PageVersionManager<\/abbr><\/a> $PageVersionManager, <abbr title=\"Illuminate\\Routing\\Redirector\">Redirector<\/abbr> $Redirect)","Construct a new PageResponseHandler",2],["PageResponseHandler::requestCreateNewPage","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestCreateNewPage","(array $input)","Request a new page be created",2],["PageResponseHandler::requestUpdatePage","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestUpdatePage","(integer $id, array $input)","Request page be updated with given input",2],["PageResponseHandler::requestDestroyPage","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestDestroyPage","(integer $id)","Request the page be deleted from database",2],["PageResponseHandler::requestCopyPage","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestCopyPage","(integer $id, array $input)","Request the page be copied to another page (duplicated)",2],["PageResponseHandler::requestStorePageVersion","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestStorePageVersion","(array $input)","Request page version be stored",2],["PageResponseHandler::requestPageList","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestPageList","(array $input, boolean $includeAdmin = false)","Request the page listing",2],["PageResponseHandler::requestUpdatePageVersionDates","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestUpdatePageVersionDates","(integer $pageVersionId, array $input)","Request a page version be updated",2],["PageResponseHandler::requestTogglePageVersionShare","Devise\\Pages\\PageResponseHandler","Devise\/Pages\/PageResponseHandler.html#method_requestTogglePageVersionShare","(integer $pageVersionId)","Request that the page version sharing be toggled",2],["PageVersionManager::__construct","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method___construct","(<a href=\"Devise\/Users\/UserHelper.html\"><abbr title=\"Devise\\Users\\UserHelper\">UserHelper<\/abbr><\/a> $UserHelper, <abbr title=\"Devise\\Pages\\DvsPageVersion\">DvsPageVersion<\/abbr> $PageVersion, <abbr title=\"Devise\\Pages\\DvsField\">DvsField<\/abbr> $Field, <abbr title=\"Devise\\Pages\\DvsCollectionInstance\">DvsCollectionInstance<\/abbr> $CollectionInstance, <a href=\"Devise\/Pages\/PagesRepository.html\"><abbr title=\"Devise\\Pages\\PagesRepository\">PagesRepository<\/abbr><\/a> $PagesRepository)","Construction depends on PageVersin model and UserHelper",2],["PageVersionManager::createNewPageVersion","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_createNewPageVersion","($pageId, $name, $createdByUserId, $startsAt = null, $endsAt = null)","Create a new page version with given parameters",2],["PageVersionManager::createDefaultPageVersion","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_createDefaultPageVersion","($page, $startsAt = null)","Create a new default page version for given page",2],["PageVersionManager::copyPageVersionToAnotherPage","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_copyPageVersionToAnotherPage","(<abbr title=\"Devise\\Pages\\$fromVersion\">$fromVersion<\/abbr> $fromVersion, <abbr title=\"Devise\\Pages\\$toPage\">$toPage<\/abbr> $toPage)","Copies a page version to another page this is useful",2],["PageVersionManager::copyPageVersion","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_copyPageVersion","(<abbr title=\"Devise\\Pages\\$pageVersionId\">$pageVersionId<\/abbr> $pageVersionId, <abbr title=\"Devise\\Pages\\$name\">$name<\/abbr> $name)","Copy page version for given page version id and name",2],["PageVersionManager::updatePageVersionDates","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_updatePageVersionDates","(int $pageVersionId, array $input)","Update the page version dates",2],["PageVersionManager::destroyPageVersion","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_destroyPageVersion","(<abbr title=\"Devise\\Pages\\$pageVersionId\">$pageVersionId<\/abbr> $pageVersionId)","Destroys a page version record",2],["PageVersionManager::togglePageVersionPreviewShare","Devise\\Pages\\PageVersionManager","Devise\/Pages\/PageVersionManager.html#method_togglePageVersionPreviewShare","(integer $pageVersionId)","Toggle \"preview_hash\" value between hashed string and",2],["PageVersionsRepository::__construct","Devise\\Pages\\PageVersionsRepository","Devise\/Pages\/PageVersionsRepository.html#method___construct","(<abbr title=\"Devise\\Pages\\DvsPageVersion\">DvsPageVersion<\/abbr> $PageVersion)","Create a new PageRepostiry instance.",2],["PageVersionsRepository::getUnscheduledPageVersions","Devise\\Pages\\PageVersionsRepository","Devise\/Pages\/PageVersionsRepository.html#method_getUnscheduledPageVersions","()","Returns a list of all the unscheduled page versions",2],["PagesRepository::__construct","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method___construct","(<abbr title=\"Devise\\Pages\\DvsPage\">DvsPage<\/abbr> $Page, <abbr title=\"Devise\\Pages\\DvsField\">DvsField<\/abbr> $Field, <abbr title=\"Devise\\Pages\\DvsGlobalField\">DvsGlobalField<\/abbr> $GlobalField, <a href=\"Devise\/Languages\/LanguageDetector.html\"><abbr title=\"Devise\\Languages\\LanguageDetector\">LanguageDetector<\/abbr><\/a> $LanguageDetector, <a href=\"Devise\/Pages\/Collections\/CollectionsRepository.html\"><abbr title=\"Devise\\Pages\\Collections\\CollectionsRepository\">CollectionsRepository<\/abbr><\/a> $CollectionsRepository, $Input = null, $Config = null, $URL = null, $File = null)","Create a new PageRepostiry instance.",2],["PagesRepository::find","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_find","(int $id, string $versionName = &#039;Default&#039;, bool $editing = false)","finds a record by it's id",2],["PagesRepository::findByRouteName","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_findByRouteName","(<abbr title=\"Devise\\Pages\\$name\">$name<\/abbr> $name, string $versionName = null, bool $editing = false)","finds a record by it's slug",2],["PagesRepository::findByRouteNameAndPreviewHash","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_findByRouteNameAndPreviewHash","(string $name, string $previewHash)","Finds the DvsPage by a route name and preview hash",2],["PagesRepository::findLocalizedPage","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_findLocalizedPage","(<abbr title=\"Devise\\Pages\\Page\">Page<\/abbr> $page)","See if a localized version of this page exists if there",2],["PagesRepository::pages","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_pages","()","Finds lots of pages in the system that are not admin",2],["PagesRepository::availableLanguagesForPage","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_availableLanguagesForPage","(integer $id)","List of all the languages available for a page",2],["PagesRepository::getPageVersions","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_getPageVersions","(integer $pageId, null $selectedPageVersionId = null)","Get the versions of a page",2],["PagesRepository::getRouteList","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_getRouteList","()","Get the route list for all the non admin pages",2],["PagesRepository::getLivePageVersion","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_getLivePageVersion","($page)","Gets the live version of this page",2],["PagesRepository::getPageVersionByName","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_getPageVersionByName","(<abbr title=\"Devise\\Pages\\Page\">Page<\/abbr> $page, string $versionName)","Gets the page version by name",2],["PagesRepository::getPagesList","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_getPagesList","(boolean $includeAdmin = false, string $search = null)","Gets a list of pages in array format probably used",2],["PagesRepository::availableViewsList","Devise\\Pages\\PagesRepository","Devise\/Pages\/PagesRepository.html#method_availableViewsList","()","Get the list of available views",2],["PagesServiceProvider::boot","Devise\\Pages\\PagesServiceProvider","Devise\/Pages\/PagesServiceProvider.html#method_boot","()","Loads the route file which allows us to have slugs",2],["PagesServiceProvider::register","Devise\\Pages\\PagesServiceProvider","Devise\/Pages\/PagesServiceProvider.html#method_register","()","Register the service provider.",2],["PagesServiceProvider::provides","Devise\\Pages\\PagesServiceProvider","Devise\/Pages\/PagesServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["DataBuilder::__construct","Devise\\Pages\\Viewvars\\DataBuilder","Devise\/Pages\/Viewvars\/DataBuilder.html#method___construct","(<a href=\"Devise\/Pages\/Viewvars\/DataCrawler.html\"><abbr title=\"Devise\\Pages\\Viewvars\\DataCrawler\">DataCrawler<\/abbr><\/a> $DataCrawler)","Construct a new data builder",2],["DataBuilder::compile","Devise\\Pages\\Viewvars\\DataBuilder","Devise\/Pages\/Viewvars\/DataBuilder.html#method_compile","($queue)","Injects data from config into the current view",2],["DataBuilder::setData","Devise\\Pages\\Viewvars\\DataBuilder","Devise\/Pages\/Viewvars\/DataBuilder.html#method_setData","(array $data)","Set the data that will be used by a view composer",2],["DataBuilder::getData","Devise\\Pages\\Viewvars\\DataBuilder","Devise\/Pages\/Viewvars\/DataBuilder.html#method_getData","()","Get the data for the view composer",2],["DataBuilder::getValue","Devise\\Pages\\Viewvars\\DataBuilder","Devise\/Pages\/Viewvars\/DataBuilder.html#method_getValue","(<abbr title=\"Devise\\Pages\\Viewvars\\$options\">$options<\/abbr> $options)","Gets the value of the view variable from options by",2],["DataCrawler::extract","Devise\\Pages\\Viewvars\\DataCrawler","Devise\/Pages\/Viewvars\/DataCrawler.html#method_extract","(array $data, string $dotPath)","Gets the value of a param by it's name",2],["ViewvarComposer::__construct","Devise\\Pages\\Viewvars\\ViewvarComposer","Devise\/Pages\/Viewvars\/ViewvarComposer.html#method___construct","(<a href=\"Devise\/Pages\/Viewvars\/DataBuilder.html\"><abbr title=\"Devise\\Pages\\Viewvars\\DataBuilder\">DataBuilder<\/abbr><\/a> $DataBuilder, $Config = null)","Create new instance of ViewvarComposer",2],["ViewvarComposer::compose","Devise\\Pages\\Viewvars\\ViewvarComposer","Devise\/Pages\/Viewvars\/ViewvarComposer.html#method_compose","(<abbr title=\"Devise\\Pages\\Viewvars\\Illuminate\\View\\View\">View<\/abbr> $view)","Injects data from config into the current view",2],["PageSearch::scopeSearch","Devise\\Search\\PageSearch","Devise\/Search\/PageSearch.html#method_scopeSearch","($query, $search)","",2],["Pagination::make","Devise\\Search\\Pagination","Devise\/Search\/Pagination.html#method_make","(<abbr title=\"Devise\\Search\\$collection\">$collection<\/abbr> $collection, <abbr title=\"Devise\\Search\\$page\">$page<\/abbr> $page, <abbr title=\"Devise\\Search\\$perPage\">$perPage<\/abbr> $perPage)","Makes a new paginated result from a collection",2],["Pagination::links","Devise\\Search\\Pagination","Devise\/Search\/Pagination.html#method_links","()","Lets us do links on this paginated object",2],["Pagination::toArray","Devise\\Search\\Pagination","Devise\/Search\/Pagination.html#method_toArray","()","Turns this paginated object into an array",2],["Pagination::appends","Devise\\Search\\Pagination","Devise\/Search\/Pagination.html#method_appends","(<abbr title=\"Devise\\Search\\$data\">$data<\/abbr> $data)","Append input queries",2],["Pagination::getIterator","Devise\\Search\\Pagination","Devise\/Search\/Pagination.html#method_getIterator","()","Iterator lets us traverse this paginated object",2],["Pagination::toJson","Devise\\Search\\Pagination","Devise\/Search\/Pagination.html#method_toJson","(int $options)","Turns this object into a json serialized object",2],["SearchableModelTrait::scopeSearch","Devise\\Search\\SearchableModelTrait","Devise\/Search\/SearchableModelTrait.html#method_scopeSearch","(<abbr title=\"Devise\\Search\\$query\">$query<\/abbr> $query, <abbr title=\"Devise\\Search\\$search\">$search<\/abbr> $search)","Makes the search process work for a model",2],["UniversalSearch::__construct","Devise\\Search\\UniversalSearch","Devise\/Search\/UniversalSearch.html#method___construct","(<a href=\"Devise\/Search\/Pagination.html\"><abbr title=\"Devise\\Search\\Pagination\">Pagination<\/abbr><\/a> $Pagination)","Create a new universal search",2],["UniversalSearch::register","Devise\\Search\\UniversalSearch","Devise\/Search\/UniversalSearch.html#method_register","(<abbr title=\"Devise\\Search\\Searchable\">Searchable<\/abbr> $item)","Provides a way to register new searchable items in",2],["UniversalSearch::search","Devise\\Search\\UniversalSearch","Devise\/Search\/UniversalSearch.html#method_search","(<abbr title=\"Devise\\Search\\$for\">$for<\/abbr> $for, int $page = 1, int $perPage = 10)","Search through all registered searchers and put them",2],["UniversalSearchProvider::boot","Devise\\Search\\UniversalSearchProvider","Devise\/Search\/UniversalSearchProvider.html#method_boot","()","Bootstrap the application events.",2],["UniversalSearchProvider::register","Devise\\Search\\UniversalSearchProvider","Devise\/Search\/UniversalSearchProvider.html#method_register","()","Register the service provider.",2],["UniversalSearchProvider::provides","Devise\\Search\\UniversalSearchProvider","Devise\/Search\/UniversalSearchProvider.html#method_provides","()","Get the services provided by the provider.",2],["ResponseHandler::__construct","Devise\\Sidebar\\ResponseHandler","Devise\/Sidebar\/ResponseHandler.html#method___construct","(<a href=\"Devise\/Sidebar\/SidebarManager.html\"><abbr title=\"Devise\\Sidebar\\SidebarManager\">SidebarManager<\/abbr><\/a> $Manager)","Construct new response handler for fetching the sidebar",2],["ResponseHandler::requestSidebarPartial","Devise\\Sidebar\\ResponseHandler","Devise\/Sidebar\/ResponseHandler.html#method_requestSidebarPartial","(array $input)","Loads the sidebar menu which houses settings and grid",2],["ResponseHandler::requestElementPartial","Devise\\Sidebar\\ResponseHandler","Devise\/Sidebar\/ResponseHandler.html#method_requestElementPartial","(array $input)","When we click the element box inside of the sidebar",2],["ResponseHandler::requestElementGridPartial","Devise\\Sidebar\\ResponseHandler","Devise\/Sidebar\/ResponseHandler.html#method_requestElementGridPartial","(array $input)","Reloads the entire grid.",2],["SidebarData::__construct","Devise\\Sidebar\\SidebarData","Devise\/Sidebar\/SidebarData.html#method___construct","()","Constructs a new SidebarData instance",2],["SidebarDataTranslator::__construct","Devise\\Sidebar\\SidebarDataTranslator","Devise\/Sidebar\/SidebarDataTranslator.html#method___construct","(<a href=\"Devise\/Pages\/Fields\/FieldManager.html\"><abbr title=\"Devise\\Pages\\Fields\\FieldManager\">FieldManager<\/abbr><\/a> $FieldManager, <abbr title=\"Devise\\Sidebar\\DvsCollectionSet\">DvsCollectionSet<\/abbr> $CollectionSet, <a href=\"Devise\/Pages\/Collections\/CollectionsRepository.html\"><abbr title=\"Devise\\Pages\\Collections\\CollectionsRepository\">CollectionsRepository<\/abbr><\/a> $CollectionsRepository)","Create a new SidebarData Translator",2],["SidebarDataTranslator::translateFromInputArray","Devise\\Sidebar\\SidebarDataTranslator","Devise\/Sidebar\/SidebarDataTranslator.html#method_translateFromInputArray","(array $inputData)","Structures the data for the editor from array input",2],["SidebarDataTranslator::translateCollectionData","Devise\\Sidebar\\SidebarDataTranslator","Devise\/Sidebar\/SidebarDataTranslator.html#method_translateCollectionData","(array $inputData)","Tranlates the input data array that has collection",2],["SidebarManager::__construct","Devise\\Sidebar\\SidebarManager","Devise\/Sidebar\/SidebarManager.html#method___construct","(<a href=\"Devise\/Sidebar\/SidebarDataTranslator.html\"><abbr title=\"Devise\\Sidebar\\SidebarDataTranslator\">SidebarDataTranslator<\/abbr><\/a> $SidebarDataTranslator, <a href=\"Devise\/Pages\/PagesRepository.html\"><abbr title=\"Devise\\Pages\\PagesRepository\">PagesRepository<\/abbr><\/a> $PagesRepository, <a href=\"Devise\/Pages\/Fields\/FieldsRepository.html\"><abbr title=\"Devise\\Pages\\Fields\\FieldsRepository\">FieldsRepository<\/abbr><\/a> $FieldsRepository, $View = null)","Create a new sidebar manager",2],["SidebarManager::fetchPartialView","Devise\\Sidebar\\SidebarManager","Devise\/Sidebar\/SidebarManager.html#method_fetchPartialView","(<abbr title=\"Devise\\Sidebar\\$inputData\">$inputData<\/abbr> $inputData)","Fetches the corresponding html views for this sidebar",2],["SidebarManager::fetchElementView","Devise\\Sidebar\\SidebarManager","Devise\/Sidebar\/SidebarManager.html#method_fetchElementView","(array $inputData)","Fetches the sidebar form for this specific type of",2],["SidebarManager::fetchElementGridView","Devise\\Sidebar\\SidebarManager","Devise\/Sidebar\/SidebarManager.html#method_fetchElementGridView","(array $inputData)","Fetches the grid of items that lists all the elements",2],["SidebarServiceProvider::boot","Devise\\Sidebar\\SidebarServiceProvider","Devise\/Sidebar\/SidebarServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["SidebarServiceProvider::register","Devise\\Sidebar\\SidebarServiceProvider","Devise\/Sidebar\/SidebarServiceProvider.html#method_register","()","Register the service provider.",2],["SidebarServiceProvider::provides","Devise\\Sidebar\\SidebarServiceProvider","Devise\/Sidebar\/SidebarServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["SnippetBladeCompiler::compile","Devise\\Sidebar\\SnippetBladeCompiler","Devise\/Sidebar\/SnippetBladeCompiler.html#method_compile","(<abbr title=\"Devise\\Sidebar\\$view\">$view<\/abbr> $view)","Runs the compile on this view",2],["DeviseException::getFacadeRoot","Devise\\Support\\DeviseException","Devise\/Support\/DeviseException.html#method_getFacadeRoot","()","Pretends to be a Facade for Exception",2],["DeviseResponse::getFacadeRoot","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_getFacadeRoot","()","Pretends to be a Facade for Response",2],["DeviseResponse::macro","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_macro","(<abbr title=\"Devise\\Support\\$name\">$name<\/abbr> $name, callable $macro)","Registers a macro",2],["DeviseResponse::hasMacro","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_hasMacro","(string $name)","Checks if macro is registered",2],["DeviseResponse::make","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_make","(string $content = &#039;&#039;, int $status = 200, array $headers = array())","Return a new response from the application.",2],["DeviseResponse::view","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_view","(string $view, array $data = array(), int $status = 200, array $headers = array())","Return a new view response from the application.",2],["DeviseResponse::json","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_json","(string|array $data = array(), int $status = 200, array $headers = array(), int $options)","Return a new JSON response from the application.",2],["DeviseResponse::jsonp","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_jsonp","(string $callback, string|array $data = array(), int $status = 200, array $headers = array(), int $options)","Return a new JSONP response from the application.",2],["DeviseResponse::stream","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_stream","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, int $status = 200, array $headers = array())","Return a new streamed response from the application.",2],["DeviseResponse::download","Devise\\Support\\DeviseResponse","Devise\/Support\/DeviseResponse.html#method_download","(<a href=\"http:\/\/php.net\/SplFileInfo\"><abbr title=\"SplFileInfo\">SplFileInfo<\/abbr><\/a>|string $file, string $name = null, array $headers = array(), null|string $disposition = &#039;attachment&#039;)","Create a new file download response.",2],["DeviseValidationException::__construct","Devise\\Support\\DeviseValidationException","Devise\/Support\/DeviseValidationException.html#method___construct","(string $message, <abbr title=\"Illuminate\\Support\\MessageBag\">MessageBag<\/abbr> $errors)","Construct a new Validation exception",2],["DeviseValidationException::getErrors","Devise\\Support\\DeviseValidationException","Devise\/Support\/DeviseValidationException.html#method_getErrors","()","Access the errors message bag",2],["Framework::__get","Devise\\Support\\Framework","Devise\/Support\/Framework.html#method___get","(<abbr title=\"Devise\\Support\\$name\">$name<\/abbr> $name)","Magic method so we can call $this->Config instead of",2],["EloquentBuilder::paginate","Devise\\Support\\Sortable\\EloquentBuilder","Devise\/Support\/Sortable\/EloquentBuilder.html#method_paginate","(int $perPage = null, array $columns = array(&#039;*&#039;))","Get a paginator for the \"select\" statement.",2],["EloquentModel::newQuery","Devise\\Support\\Sortable\\EloquentModel","Devise\/Support\/Sortable\/EloquentModel.html#method_newQuery","(bool $excludeDeleted = true)","Get a new query builder for the model's table.",2],["Filter::__construct","Devise\\Support\\Sortable\\Filter","Devise\/Support\/Sortable\/Filter.html#method___construct","(<abbr title=\"Devise\\Support\\Sortable\\$filterName\">$filterName<\/abbr> $filterName, <abbr title=\"Devise\\Support\\Sortable\\$replacementSelector\">$replacementSelector<\/abbr> $replacementSelector, array $options = array(), <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","",2],["Filter::getField","Devise\\Support\\Sortable\\Filter","Devise\/Support\/Sortable\/Filter.html#method_getField","()","Get the field for this Filter, basically the ",2],["Link::__construct","Devise\\Support\\Sortable\\Link","Devise\/Support\/Sortable\/Link.html#method___construct","(<a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework, null $field = null, null $label = null, array $options = array(), array $defaultOrderBy = array())","Construct a new link",2],["Link::getClearSortLink","Devise\\Support\\Sortable\\Link","Devise\/Support\/Sortable\/Link.html#method_getClearSortLink","(<abbr title=\"Devise\\Support\\Sortable\\$text\">$text<\/abbr> $text, <abbr title=\"Devise\\Support\\Sortable\\$options\">$options<\/abbr> $options)","",2],["Link::getLink","Devise\\Support\\Sortable\\Link","Devise\/Support\/Sortable\/Link.html#method_getLink","(<abbr title=\"Devise\\Support\\Sortable\\$cookie\">$cookie<\/abbr> $cookie)","",2],["Manager::__construct","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method___construct","(<a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new Manager for sorting",2],["Manager::getIsMulti","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_getIsMulti","()","",2],["Manager::setIsMulti","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_setIsMulti","(mixed $isMulti)","",2],["Manager::getKey","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_getKey","()","",2],["Manager::setKey","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_setKey","(mixed $key)","",2],["Manager::addToStack","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_addToStack","(<abbr title=\"Devise\\Support\\Sortable\\$all\">$all<\/abbr> $all)","",2],["Manager::removeFromStack","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_removeFromStack","(<abbr title=\"Devise\\Support\\Sortable\\$all\">$all<\/abbr> $all)","",2],["Manager::getStack","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_getStack","()","",2],["Manager::clearStack","Devise\\Support\\Sortable\\Manager","Devise\/Support\/Sortable\/Manager.html#method_clearStack","()","",2],["Sort::__construct","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method___construct","(<a href=\"Devise\/Support\/Sortable\/Manager.html\"><abbr title=\"Devise\\Support\\Sortable\\Manager\">Manager<\/abbr><\/a> $Manager, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","",2],["Sort::link","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method_link","(<abbr title=\"Devise\\Support\\Sortable\\$field\">$field<\/abbr> $field, null $label = null, array $options = array())","",2],["Sort::clearSortLink","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method_clearSortLink","(string $label = &#039;Clear Sort&#039;, null $options = null)","",2],["Sort::filter","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method_filter","(<abbr title=\"Devise\\Support\\Sortable\\$filterName\">$filterName<\/abbr> $filterName, <abbr title=\"Devise\\Support\\Sortable\\$elementSelector\">$elementSelector<\/abbr> $elementSelector, array $options = array())","",2],["Sort::setDefaultOrderBy","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method_setDefaultOrderBy","(string $field, string $dir = &#039;asc&#039;)","Sets the default value of defaultOrderBy",2],["Sort::handleSorting","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method_handleSorting","(<abbr title=\"Devise\\Support\\Sortable\\QueryBuilder\">QueryBuilder<\/abbr> $query, <abbr title=\"Devise\\Support\\Sortable\\Model\">Model<\/abbr> $model)","Ads orderBy to the current query in builder",2],["Sort::handleFiltering","Devise\\Support\\Sortable\\Sort","Devise\/Support\/Sortable\/Sort.html#method_handleFiltering","(<abbr title=\"Devise\\Support\\Sortable\\QueryBuilder\">QueryBuilder<\/abbr> $query, <abbr title=\"Devise\\Support\\Sortable\\Eloquent\">Eloquent<\/abbr> $model)","We process filtering on this query if there is any",2],["SortableServiceProvider::boot","Devise\\Support\\Sortable\\SortableServiceProvider","Devise\/Support\/Sortable\/SortableServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["SortableServiceProvider::register","Devise\\Support\\Sortable\\SortableServiceProvider","Devise\/Support\/Sortable\/SortableServiceProvider.html#method_register","()","Register the service provider.",2],["SortableServiceProvider::provides","Devise\\Support\\Sortable\\SortableServiceProvider","Devise\/Support\/Sortable\/SortableServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["SupportServiceProvider::boot","Devise\\Support\\SupportServiceProvider","Devise\/Support\/SupportServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["SupportServiceProvider::register","Devise\\Support\\SupportServiceProvider","Devise\/Support\/SupportServiceProvider.html#method_register","()","Register the service provider.",2],["SupportServiceProvider::provides","Devise\\Support\\SupportServiceProvider","Devise\/Support\/SupportServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["DeviseUserController::__construct","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method___construct","(<abbr title=\"Devise\\Users\\DvsUser\">DvsUser<\/abbr> $DvsUser, <abbr title=\"Devise\\Users\\DvsGroup\">DvsGroup<\/abbr> $DvsGroup, <a href=\"Devise\/Users\/Sessions\/SessionsRepository.html\"><abbr title=\"Devise\\Users\\Sessions\\SessionsRepository\">SessionsRepository<\/abbr><\/a> $SessionsRepository, <a href=\"Devise\/Users\/UsersRepository.html\"><abbr title=\"Devise\\Users\\UsersRepository\">UsersRepository<\/abbr><\/a> $UsersRepository, $App = null, $Redirect = null, $View = null)","",2],["DeviseUserController::index","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_index","()","Render users index view",2],["DeviseUserController::create","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_create","()","Render user create view",2],["DeviseUserController::store","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_store","()","Process user create form data",2],["DeviseUserController::edit","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_edit","(integer $userId)","Render user \"edit\" view",2],["DeviseUserController::update","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_update","(integer $userId)","Process user edit form data",2],["DeviseUserController::show","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_show","(integer $userId)","Render user \"show\" view",2],["DeviseUserController::confirmDestroy","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_confirmDestroy","(integer $userId)","Render \"destroy confirmation\" view",2],["DeviseUserController::postDestroy","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postDestroy","(integer $userId)","Destroy user record",2],["DeviseUserController::editPassword","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_editPassword","(integer $userId)","Render \"edit password\" form",2],["DeviseUserController::updatePassword","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_updatePassword","(integer $userId)","Process edit password form data",2],["DeviseUserController::login","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_login","()","Render login view",2],["DeviseUserController::postLogin","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postLogin","()","Process login form data",2],["DeviseUserController::postLogout","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postLogout","()","Process user log out",2],["DeviseUserController::register","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_register","()","Render user registration form",2],["DeviseUserController::postRegister","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postRegister","()","Process user registration form data",2],["DeviseUserController::forgotPassword","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_forgotPassword","()","Renders forgot password view",2],["DeviseUserController::resendActivation","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_resendActivation","()","Renders resend user activation email",2],["DeviseUserController::postResendActivation","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postResendActivation","()","Handle POST data from resend activation form",2],["DeviseUserController::remind","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_remind","()","Display the password reminder view.",2],["DeviseUserController::postRemind","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postRemind","()","Handle a POST request to remind a user of their password.",2],["DeviseUserController::reset","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_reset","(string $token = null)","Display the password reset view for the given token.",2],["DeviseUserController::postReset","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_postReset","()","Handle a POST request to reset a user's password.",2],["DeviseUserController::activate","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_activate","(integer $userId, string $activateCode)","Handle activation of user account",2],["DeviseUserController::clearUnactivatedUsers","Devise\\Users\\DeviseUserController","Devise\/Users\/DeviseUserController.html#method_clearUnactivatedUsers","()","Clears records of unactivated users",2],["GroupManager::__construct","Devise\\Users\\Groups\\GroupManager","Devise\/Users\/Groups\/GroupManager.html#method___construct","(<abbr title=\"Devise\\Users\\Groups\\DvsGroup\">DvsGroup<\/abbr> $Group, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new Group manager",2],["GroupManager::createRules","Devise\\Users\\Groups\\GroupManager","Devise\/Users\/Groups\/GroupManager.html#method_createRules","()","Create validation rules",2],["GroupManager::createGroup","Devise\\Users\\Groups\\GroupManager","Devise\/Users\/Groups\/GroupManager.html#method_createGroup","(array $input)","Create a new Group",2],["GroupManager::updateRules","Devise\\Users\\Groups\\GroupManager","Devise\/Users\/Groups\/GroupManager.html#method_updateRules","(integer $id, array $input)","Update validation rules",2],["GroupManager::updateGroup","Devise\\Users\\Groups\\GroupManager","Devise\/Users\/Groups\/GroupManager.html#method_updateGroup","(integer $id, array $input)","Update a new Group",2],["GroupManager::destroyGroup","Devise\\Users\\Groups\\GroupManager","Devise\/Users\/Groups\/GroupManager.html#method_destroyGroup","(integer $id)","Delete a Group",2],["GroupsRepository::__construct","Devise\\Users\\Groups\\GroupsRepository","Devise\/Users\/Groups\/GroupsRepository.html#method___construct","(<abbr title=\"Devise\\Users\\Groups\\DvsGroup\">DvsGroup<\/abbr> $Group, <abbr title=\"Devise\\Users\\Groups\\DvsUser\">DvsUser<\/abbr> $User)","",2],["GroupsRepository::findById","Devise\\Users\\Groups\\GroupsRepository","Devise\/Users\/Groups\/GroupsRepository.html#method_findById","(int $id)","Find group by id",2],["GroupsRepository::findByName","Devise\\Users\\Groups\\GroupsRepository","Devise\/Users\/Groups\/GroupsRepository.html#method_findByName","(string $name)","Find group by name",2],["GroupsRepository::groupList","Devise\\Users\\Groups\\GroupsRepository","Devise\/Users\/Groups\/GroupsRepository.html#method_groupList","()","List all the groups",2],["GroupsRepository::groups","Devise\\Users\\Groups\\GroupsRepository","Devise\/Users\/Groups\/GroupsRepository.html#method_groups","()","Paginated list of groups",2],["GroupsRepository::groupListForUser","Devise\\Users\\Groups\\GroupsRepository","Devise\/Users\/Groups\/GroupsRepository.html#method_groupListForUser","(integer $userId)","Get a list of groups for the given user id",2],["GroupsResponseHandler::__construct","Devise\\Users\\Groups\\GroupsResponseHandler","Devise\/Users\/Groups\/GroupsResponseHandler.html#method___construct","(<abbr title=\"Illuminate\\Routing\\Redirector\">Redirector<\/abbr> $Redirect, <a href=\"Devise\/Users\/Groups\/GroupManager.html\"><abbr title=\"Devise\\Users\\Groups\\GroupManager\">GroupManager<\/abbr><\/a> $Manager)","Construct new response handler",2],["GroupsResponseHandler::requestCreateGroup","Devise\\Users\\Groups\\GroupsResponseHandler","Devise\/Users\/Groups\/GroupsResponseHandler.html#method_requestCreateGroup","(array $input)","Create a new user request",2],["GroupsResponseHandler::requestUpdateGroup","Devise\\Users\\Groups\\GroupsResponseHandler","Devise\/Users\/Groups\/GroupsResponseHandler.html#method_requestUpdateGroup","(integer $id, array $input)","Update a group",2],["GroupsResponseHandler::requestDestroyGroup","Devise\\Users\\Groups\\GroupsResponseHandler","Devise\/Users\/Groups\/GroupsResponseHandler.html#method_requestDestroyGroup","(integer $id)","Delete a group",2],["RedirectHandler::__construct","Devise\\Users\\Permissions\\RedirectHandler","Devise\/Users\/Permissions\/RedirectHandler.html#method___construct","(<a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new redirector",2],["RedirectHandler::redirect","Devise\\Users\\Permissions\\RedirectHandler","Devise\/Users\/Permissions\/RedirectHandler.html#method_redirect","(<abbr title=\"Devise\\Users\\Permissions\\$conditionObject\">$conditionObject<\/abbr> $conditionObject)","The redirect handles redirecting appropriately based",2],["RuleList::__construct","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method___construct","(<abbr title=\"User\">User<\/abbr> $User, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new RuleList",2],["RuleList::__call","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method___call","(string $method, array $arguments = array())","Handle execution of the different types of methods",2],["RuleList::isLoggedIn","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_isLoggedIn","()","Is user logged in system",2],["RuleList::isInGroup","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_isInGroup","(string $groupname)","Checks if user is in a group",2],["RuleList::isNotInGroup","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_isNotInGroup","(string $groupname)","Check user is not in a group",2],["RuleList::hasUserName","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_hasUserName","(string $username)","Determine if a username or email is used for application",2],["RuleList::hasEmail","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_hasEmail","(string $email)","Check if email field equals specified email",2],["RuleList::hasFieldValue","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_hasFieldValue","(string $field, string $value)","Check if database field is equal to the specified value",2],["RuleList::showDeviseSpan","Devise\\Users\\Permissions\\RuleList","Devise\/Users\/Permissions\/RuleList.html#method_showDeviseSpan","($key, $collection)","Determines if we should show the devise span",2],["RuleManager::__construct","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method___construct","(<a href=\"Devise\/Users\/Permissions\/RedirectHandler.html\"><abbr title=\"Devise\\Users\\Permissions\\RedirectHandler\">RedirectHandler<\/abbr><\/a> $RedirectHandler, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new rule manager",2],["RuleManager::getRules","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_getRules","()","Get all rules",2],["RuleManager::getClosure","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_getClosure","(string $method)","Get all closures",2],["RuleManager::addRule","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_addRule","(string $rule, <abbr title=\"Devise\\Users\\Permissions\\callback\">callback<\/abbr> $closure = null)","Add new element to rules array",2],["RuleManager::getCondition","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_getCondition","(string $conditionName)","Retrieve conditions JSON from permission conditions",2],["RuleManager::runCondition","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_runCondition","(string $conditionName, boolean $redirectOnFail, boolean $evaluateResults = true)","Begins condition checking process by retrieving condition",2],["RuleManager::executeCondition","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_executeCondition","(object $conditionObject)","Executes conditions one at a time and returns result",2],["RuleManager::evaluateResults","Devise\\Users\\Permissions\\RuleManager","Devise\/Users\/Permissions\/RuleManager.html#method_evaluateResults","($results, $redirectOnFail)","Determines if access allowed\/denied by checking results",2],["SessionsRepository::__construct","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method___construct","(<abbr title=\"Devise\\Users\\Sessions\\DvsUser\">DvsUser<\/abbr> $DvsUser, <a href=\"Devise\/Users\/UserManager.html\"><abbr title=\"Devise\\Users\\UserManager\">UserManager<\/abbr><\/a> $UserManager, <a href=\"Devise\/Users\/UsersRepository.html\"><abbr title=\"Devise\\Users\\UsersRepository\">UsersRepository<\/abbr><\/a> $UsersRepository, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Create a new SessionsRepository instance.",2],["SessionsRepository::login","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_login","(array $input)","Attempty to login a user",2],["SessionsRepository::logout","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_logout","()","Log user out",2],["SessionsRepository::register","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_register","(array $input)","Register new user",2],["SessionsRepository::resendActivation","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_resendActivation","(array $input)","Resends activate email using submitted email address",2],["SessionsRepository::remind","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_remind","(array $input)","Handle a POST request for \"remind password\"",2],["SessionsRepository::reset","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_reset","(array $credentials)","Handle POST data from reset (change) password form",2],["SessionsRepository::activate","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_activate","(int $userId, string $activateCode)","Process user activation request",2],["SessionsRepository::removeUnactivatedUsers","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_removeUnactivatedUsers","($daysOutstanding = 30)","Removes users which have been awaiting activation (after",2],["SessionsRepository::validateCredentials","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_validateCredentials","($credentials)","Validate user credentials (without logging user into",2],["SessionsRepository::getRememberMe","Devise\\Users\\Sessions\\SessionsRepository","Devise\/Users\/Sessions\/SessionsRepository.html#method_getRememberMe","($input)","Get \"remember_me\" field value",2],["UserHelper::__construct","Devise\\Users\\UserHelper","Devise\/Users\/UserHelper.html#method___construct","(<a href=\"Devise\/Users\/Permissions\/RuleManager.html\"><abbr title=\"Devise\\Users\\Permissions\\RuleManager\">RuleManager<\/abbr><\/a> $RuleManager, <a href=\"Devise\/Users\/UsersRepository.html\"><abbr title=\"Devise\\Users\\UsersRepository\">UsersRepository<\/abbr><\/a> $UsersRepository, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","",2],["UserHelper::__call","Devise\\Users\\UserHelper","Devise\/Users\/UserHelper.html#method___call","(string $method, array $arguments)","Magic method to used to catch function(s) not found",2],["UserHelper::currentUser","Devise\\Users\\UserHelper","Devise\/Users\/UserHelper.html#method_currentUser","()","Convenience function to get current user object",2],["UserHelper::currentUserId","Devise\\Users\\UserHelper","Devise\/Users\/UserHelper.html#method_currentUserId","()","Convenience function to get current user's id",2],["UserHelper::checkConditions","Devise\\Users\\UserHelper","Devise\/Users\/UserHelper.html#method_checkConditions","(string $conditionNames, boolean $redirectOnFail = false)","Convenience function for handing a single condition",2],["UserHelper::checkRule","Devise\\Users\\UserHelper","Devise\/Users\/UserHelper.html#method_checkRule","(string $method, array $arguments = array())","Checks for any user-defined rules\/closures",2],["UserManager::__construct","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method___construct","(<abbr title=\"Devise\\Users\\DvsUser\">DvsUser<\/abbr> $DvsUser, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new user manager",2],["UserManager::createRules","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_createRules","()","Create rules for a new user",2],["UserManager::createUser","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_createUser","(array $input)","Create a new user",2],["UserManager::updateRules","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_updateRules","(integer $id, array $input)","These are update rules for a user",2],["UserManager::updateUser","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_updateUser","(integer $id, array $input)","Update a new user",2],["UserManager::destroyUser","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_destroyUser","(integer $id)","Delete a user",2],["UserManager::activate","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_activate","(<abbr title=\"Devise\\Users\\DvsUser\">DvsUser<\/abbr> $user)","Activate instance of DvsUser",2],["UserManager::generateActivateCode","Devise\\Users\\UserManager","Devise\/Users\/UserManager.html#method_generateActivateCode","(<abbr title=\"Devise\\Users\\DvsUser\">DvsUser<\/abbr> $user, integer $length = 42)","Generate a random \"activate_code\" string",2],["UserServiceProvider::boot","Devise\\Users\\UserServiceProvider","Devise\/Users\/UserServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["UserServiceProvider::register","Devise\\Users\\UserServiceProvider","Devise\/Users\/UserServiceProvider.html#method_register","()","Register the service provider.",2],["UserServiceProvider::provides","Devise\\Users\\UserServiceProvider","Devise\/Users\/UserServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["UsersRepository::__construct","Devise\\Users\\UsersRepository","Devise\/Users\/UsersRepository.html#method___construct","(<abbr title=\"Devise\\Users\\DvsUser\">DvsUser<\/abbr> $DvsUser, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Construct a new users repository",2],["UsersRepository::retrieveCurrentUser","Devise\\Users\\UsersRepository","Devise\/Users\/UsersRepository.html#method_retrieveCurrentUser","()","Retrieve currently logged-in user object",2],["UsersRepository::retrieveCurrentUserId","Devise\\Users\\UsersRepository","Devise\/Users\/UsersRepository.html#method_retrieveCurrentUserId","()","Retrieve current user id",2],["UsersRepository::findById","Devise\\Users\\UsersRepository","Devise\/Users\/UsersRepository.html#method_findById","(int $id)","Find user by id",2],["UsersRepository::users","Devise\\Users\\UsersRepository","Devise\/Users\/UsersRepository.html#method_users","()","Paginated list of users",2],["UsersRepository::findByEmail","Devise\\Users\\UsersRepository","Devise\/Users\/UsersRepository.html#method_findByEmail","(string $email)","Find user by email address",2],["UsersResponseHandler::__construct","Devise\\Users\\UsersResponseHandler","Devise\/Users\/UsersResponseHandler.html#method___construct","(<a href=\"Devise\/Users\/Sessions\/SessionsRepository.html\"><abbr title=\"Devise\\Users\\Sessions\\SessionsRepository\">SessionsRepository<\/abbr><\/a> $SessionsRepository, <a href=\"Devise\/Users\/UserManager.html\"><abbr title=\"Devise\\Users\\UserManager\">UserManager<\/abbr><\/a> $UserManager, <a href=\"Devise\/Support\/Framework.html\"><abbr title=\"Devise\\Support\\Framework\">Framework<\/abbr><\/a> $Framework)","Constructs a new UsersResponseHandler",2],["UsersResponseHandler::executeLogout","Devise\\Users\\UsersResponseHandler","Devise\/Users\/UsersResponseHandler.html#method_executeLogout","()","Executes logout method in SessionsRepository",2],["UsersResponseHandler::executeLogin","Devise\\Users\\UsersResponseHandler","Devise\/Users\/UsersResponseHandler.html#method_executeLogin","(array $input)","Executes login method in SessionsRepository",2],["UsersResponseHandler::requestCreateUser","Devise\\Users\\UsersResponseHandler","Devise\/Users\/UsersResponseHandler.html#method_requestCreateUser","(array $input)","Request a new user be created",2],["UsersResponseHandler::requestUpdateUser","Devise\\Users\\UsersResponseHandler","Devise\/Users\/UsersResponseHandler.html#method_requestUpdateUser","(integer $id, array $input)","Request user be updated with a given input",2],["UsersResponseHandler::requestDestroyUser","Devise\\Users\\UsersResponseHandler","Devise\/Users\/UsersResponseHandler.html#method_requestDestroyUser","(integer $id)","Request the user be deleted from database",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']